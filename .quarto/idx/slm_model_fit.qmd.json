{"title":"Modellfit","markdown":{"headingText":"Modellfit","containsRefs":false,"markdown":"\n```{r}\n#| echo: false\n#| warning: false\n#| message: false\nsource('_common.R')\n```\n\n## Residuen\n\n```{r defs_reg_resid}\nadl <- readr::read_delim(\"adcs;adas\\n4.05;50.01\\n5.03;46.04\\n5.03;39.03\\n8.04;49.02\\n8.04;46.02\\n8.04;42.03\\n8.06;55.03\\n8.06;37.03\\n9.02;52.01\\n11.03;57.04\\n11.03;51.04\\n12.01;47.01\\n13.01;52.01\\n13.01;50.02\\n12.99;41.03\\n13.01;36.02\\n13.01;28\\n14.02;46.04\\n15;48.03\\n15;42.02\\n15;36.02\\n15.02;34\\n16.02;39.03\\n17;45.03\\n17;24.02\\n17.99;43.02\\n18.99;40\\n20.01;34.01\\n20.01;29\\n21.02;33.03\\n23;43.02\\n23;10\\n23.98;25.01\\n24.99;49.02\\n24.99;35.01\\n26.01;35\\n26.97;45.03\\n28;22\\n32.99;55.03\\n12.01;50.1\\n12.01;49.03\\n\",\n                         delim = ';',\n                         col_types = 'dd')\nmod <- lm(adcs ~ adas, adl)\n```\n\n\n## Was sind noch mal Residuen $\\epsilon_i$ bzw. deren Schätzer $\\hat{\\epsilon}_i = e_i$\n\n$$\ny_i = \\beta_0 + \\beta_1 \\times x_i + \\epsilon_i\n$$\n\n```{r}\n#| fig.cap: \"Spielzeugbeispiel mit Residuen $\\\\hat{\\\\epsilon}_i = e_i = y_i - \\\\hat{y}_i$\"\n\nset.seed(12)\nsimple <- tibble::tibble(x = 0:3,\n                 y = 2 + 0.5 * x + rnorm(4,0,.5))\nmod0 <- lm(y ~ x, simple)\nsimple$y_hat <- predict(mod0)\nsimple$epsilon <- paste0('hat(epsilon)[',1:4,']')\nsimple$ys <- paste0('list(x[',1:4,'],y[',1:4,'])')\nsimple$yshat <- paste('hat(y)[',1:4,']')\np_res <- ggplot(simple, aes(x,y,label = epsilon)) + \n  geom_point(size=3) +\n  geom_line(aes(y = y_hat), size=2, color = 'red') +\n  geom_point(aes(y = y_hat), size=3, color = 'red') +\n  geom_segment(aes(x = x, y = y_hat, xend = x, yend = y),\n               arrow = arrow(type='closed', length=unit(0.05, unit='npc')), size=1,\n               color = 'green') +  \n  geom_text(aes(x = x - 0.1, y=y_hat, label = yshat), parse=T,\n            size = 5, check_overlap = T) +\n  geom_text(aes(x = x + 0.14, y = (y_hat + y)/2), parse=T, size=5) + \n  lims(x = c(-.3,3.3), y = c(1,3.8)) \nprint(p_res)\n```\n\n## Annahme: $\\epsilon_i \\sim \\mathcal{N}(0, \\sigma^2)$\n\n```{r}\n#| fig.cap=\"Verteilung der Werte für verschiedene x-Werte (rote Punkte) und die resultierende Regressionsgerade mit den Vorhersagewerte $\\\\hat{y}_i$ (schwarze Punkte)\"\n\nset.seed(123)\nxx <- seq(-3,3,0.05)\nyy <- dnorm(xx)\nn <- length(xx) \nn_2 <- 20\ndf <- tibble::tibble(\n  x_0 = rep(1:3, each=n),\n  x = x_0 + rep(yy,3),\n  y = rep(seq(-1,1,length.out=n), 3) + rep(1:3, each=n),\n  g = rep(letters[1:3], each=n)\n)\ndf_2 <- tibble::tibble(x = 1:3, y = 1:3, g = 'a')\ndf_3 <- tibble::tibble(x = rep(1:3, each=n_2),\n                       y = rnorm(3*n_2, mean=x, sd = 0.5), g = 'a')\nggplot(df, aes(x, y, group=g)) + \n  geom_line(data = df_2, aes(x,y), size=1.5) +\n  geom_point(data = df_3, aes(x,y), color='red') +\n  geom_ribbon(aes(xmin = x_0, xmax = x), fill='red', alpha=0.5) +\n  geom_path() +\n  geom_point(data = df_2, aes(x,y), size=3) +\n  scale_x_continuous(breaks = 1:3) +\n  labs(x = 'x-Werte', y = 'y-Werte') \n```\n\n\n\n## Übersicht Residuen\n\nTable: Übersicht über verschiedene Arten von Residuen^[$h_i$ = Influenz von Punkt $i$]\n\n| Typ | Berechnung | Ziel |\n| --- | --- | --- |\n| Einfache Residuen | $e_i = y_i - \\hat{y}_i$ | Verteilungsannahme |\n| Standardisierte Residuen |  $e_{Si} = \\frac{e_i}{\\hat{\\sigma}\\sqrt{1-h_i}}$ | Verteilungsannahme |\n| Studentized Residuen |  $e_{Ti} = \\frac{e_i}{\\hat{\\sigma}_{(-i)}\\sqrt{1-h_i}}$ | Einfluss  auf Modell |\n\n## Residuen in `R` berechnen mit `residuals()` und Freunden\n\n```{r, echo=T}\nresiduals(mod)[1:5] # einfache Residuen\nrstandard(mod)[1:5] # standardisierte Residuen\nrstudent(mod)[1:5] # studentized Residuen\n```\n\n```{r}\nadl <- adl %>% dplyr::mutate(\n  y_hat = predict(mod),\n  resid = resid(mod),\n  rstudent = rstudent(mod),\n  rstandard = rstandard(mod)\n)\n```\n\n## Residuen in `R` inspizieren\n\n```{r, eval=F, echo=T}\ny_hat <- predict(mod)\nplot(y_hat, residuals(mod))\nplot(y_hat, rstandard(mod))\nplot(y_hat, rstudent(mod))\n```\n\n\n## Diagnoseplot - Einfache Residuen $\\hat{\\epsilon_i} \\sim \\hat{y_i}$\n```{r}\n#| fig.cap=\"Streudiagramm der Residuen $\\\\hat{\\\\epsilon_i}$ gegen die Vorhersagewerte $\\\\hat{y}_i$\"\n\nplot(resid ~ y_hat, adl, ylab=expression(e[i]),\n     xlab=expression(paste(hat(y)[i], '-ADCS-MCI-ADL score')),\n     ylim=c(-20,20)) \nabline(h = 0, lty = 2, col = 'red')\n```\n\n## Diagnoseplot - Standardisierte Residuen $\\hat{\\epsilon}_{Si} \\sim \\hat{y_i}$\n\n```{r}\n#| fig.align='center', fig.cap=\"Streudiagramm der standardisierten Residuen $\\\\hat{\\\\epsilon}_{Si}$ gegen die Vorhersagewerte $\\\\hat{y}_i$\"\n\nplot(rstandard ~ y_hat, adl, ylim=c(-4,4),\n     xlab = expression(paste(hat(y)[i], '-ADCS-MCI-ADL score')),\n     ylab = expression(e[Si])) \nabline(h = 0, lty = 2, col = 'red')\nabline(h = c(-2,-1,1,2), lty=3, col = 'gray')\n```\n\n## Diagnoseplot - Studentized Residuen $\\hat{\\epsilon}_{Ti} \\sim \\hat{y_i}$\n```{r}\n#| fig.cap=\"Streudiagramm der studentized Residuals $\\\\hat{\\\\epsilon}_{Ti}$ gegen die Vorhersagewerte $\\\\hat{y}_i$\"\n\nplot(rstudent ~ y_hat, adl, \n     xlab = expression(paste(hat(y)[i], '-ADCS-MCI-ADL score')),\n     ylab = expression(e[Ti]),\n     ylim=c(-4,4))\nabline(h = 0, lty = 2, col = 'red')\n```\n\n## Diagnoseplot - Wie sehen Probleme aus?\n\n```{r}\n#| fig.cap=\"Beispielstreudiagramm\"\n\nn <- 30\ndf_res <- tibble(\n  x = seq(0,10,length.out=n),\n  y = x*cos(seq(0,6*pi,length.out = n)/10) + 3*x + 2 + rnorm(n),\n  resid = resid(lm(y~x)),\n  y_hat = predict(lm(y~x))\n)\nplot(resid~y_hat, df_res,\n     xlab = expression(paste('Vorhersagewerte ', hat(y)[i])),\n     ylab = expression(hat(epsilon)[i]))\nabline(h = 0, lty = 2, col = 'red')\n```\n\n## Diagnoseplot - Wie sehen Probleme aus?\n\n```{r}\n#| fig.cap=\"Beispielstreudiagramm\"\n\nn <- 40\nset.seed(125)\ndf_res_2 <- tibble(\n  y_hat = runif(n, 0, 1),\n  resid = 3 * y_hat * rnorm(n, 0, 2),\n)\nplot(resid~y_hat, df_res_2,\n     xlab = expression(paste('Vorhersagewerte ', hat(y)[i])),\n     ylab = expression(hat(epsilon)[i]))\nabline(h = 0, lty = 2, col = 'red')\n```\n\n## Wie kann die Verteilung der Residuen überprüft werden?\n\n```{r}\ndf_qq <- tibble::tibble(y = c(-2, 5, -1.2, 0.1, 7))\ndf_qq %>% knitr::kable(booktabs=T,\n                       caption=\"Spielzeugbeispieldaten mit $n=5$\")\n```\n\n```{r, fig.cap=\"Dichtefunktion der Standardnormalverteilung\", fig.height=4}\ndf_qq_2 <- tibble::tibble(\n  x = seq(-3,3,length.out=100),\n  y = dnorm(x)\n)\nggplot(df_qq_2, aes(x,y)) +\n  geom_ribbon(aes(ymin = 0, ymax = y), fill='red', alpha=.5) +\n  geom_line() +\n  labs(x = 'Werte', y = 'Dichte') \n```\n\n## Konstruktion eines qq-Graphen\n\n```{r}\nn <- dim(df_qq)[1]\ndf_qq_3 <- tibble::tibble(\n    x = qnorm(1/(n+1)*(1:n)),\n    y = dnorm(x)\n  )\nggplot(df_qq_2, aes(x,y)) +\n  geom_ribbon(aes(ymin = 0, ymax = y), fill='red', alpha=.5) +\n  geom_line() +\n  geom_segment(data = df_qq_3, aes(x = x, xend = x, y = 0, yend = y)) +\n  scale_x_continuous(breaks = round(df_qq_3$x,2)) +\n  labs(x = NULL, y = 'Dichte') +\n  theme(axis.text.x = element_text(angle = 45, vjust=1, hjust=1))\n```\n\nTable: Sortierte Datenwerte\n\n| kleinster | 2.kleinster | mittlerer | 2.größter | größter |\n| --- | --- | --- | --- | --- |\n| `r df_qq$y[1]` |`r df_qq$y[3]` |`r df_qq$y[4]` | `r df_qq$y[2]` |`r df_qq$y[5]` |\n\n## Konstruktion eines qq-Graphen\n\n```{r, fig.cap = \"Streudiagramm der empirischen Werte gegen die theoretischen Quantilen\"}\ndf_qq_3 %>% \n  add_column(d = sort(df_qq$y)) %>% \n  ggplot(aes(x, d)) + \n  geom_point(size = 2) +\n  scale_x_continuous(breaks = round(df_qq_3$x,2)) +\n  labs(x = 'Theoretisch', y = 'Empirisch') \n```\n\n\n## Beispiele für qq-Graphen mit `qqnorm()` und `qqline()`\n\n\n```{r}\npar(mfrow=c(2,2), mar=c(1,1,1,1))\npp <- ppoints(50)\npp_norm <- qnorm(pp)\npp_cauchy <- qcauchy(pp)\npp_chisq <- qf(pp, 10, 8)\n#pp_chisq <- qchisq(pp, df = 3)\nqqplot(pp_norm, pp_norm, xlab='theoretical', ylab='empirical', main='Perfekt')\nqqline(pp_norm, col = 'steelblue', lwd=2) \n\n\nqqplot(pp_norm, pp_cauchy, xlab='theoretical', ylab='empirical', main='Tails heavy')\nqqline(pp_cauchy, col = 'steelblue', lwd=2)\n\n\nqqplot(pp_cauchy, pp_norm, xlab='theoretical', ylab='empirical', main='Tails light')\nqqline(pp_norm, col = 'steelblue', lwd=2)\n\n\nqqplot(pp_norm, pp_chisq, xlab='theoretical', ylab='empirical', main='Rechtsschief')\nqqline(pp_chisq, col = 'steelblue', lwd=2)\npar(mfrow=c(1,1))\n```\n\n\n\n## Diagnoseplot - QQ-Diagramm\n\\small\n```{r}\n#| fig.cap: \"QQ-Diagramm der Residuen des ADAS-ADCS-Modells\"\n \npar(mar=c(4,4,1,1))\nqqnorm(resid(mod))\n```\n\n^[In `R` mit `qqnorm(resid(mod))`]\n\n\n## `summary()`\n\n\\scriptsize\n```{r}\nsummary(mod)\n```\n\n## Neue Idee zu Residuen\n\n```{r}\n#| fig.cap: \"Spielzeugbeispiel mit Residuen $\\\\hat{\\\\epsilon}_i = e_i = y_i - \\\\hat{y}_i$\"\n\nprint(p_res)\n```\n\n\n## Zum Nacharbeiten\n\n@kutner2005 [p.100-114] \\newline\n@pos_residuals \\newline\n@fox2011 [p.285-296]\n\n\n## Hebelwerte\n\n```{r}\nadl <- adl %>% dplyr::mutate(\n  y_hat = predict(mod),\n  resid = resid(mod),\n  rstudent = rstudent(mod),\n  rstandard = rstandard(mod)\n)\n```\n\n\n```{r}\n#| fig.cap: \"Streudiagramm der ADCS-MCI-ADL scores gegen ADAS-cos scores\"\n\nggplot(adl, aes(adas,adcs)) +\n  geom_point(size=2) +\n  labs(x = 'ADAS-cog score', y = 'ADCS-MCI-ADL score') \n```\n\n\n\n```{r}\n#| fig.cap: \"Hebelwerte der jeweiligen $x_i$s\"\n\nadl_2 <- adl %>% dplyr::mutate(h = hatvalues(mod))\nggplot(adl_2,\n       aes(adas, h)) +\n  geom_segment(aes(xend=adas, y=0, yend=h), size=1.3) +\n  geom_point(size=4) +\n  labs(x = 'ADAS-cog score',\n       y = 'Leverage') \n```\n\n```{r}\n#| fig.cap: \"Hebelwerte der jeweiligen Datenpunkte\"\n\nggplot(adl_2, aes(adas, adcs)) +\n  geom_point(aes(size = h)) +\n  geom_point(col = 'red', size=.3) +\n  geom_vline(xintercept = mean(adl_2$adas), linetype = 'dashed',col='red') +\n  labs(x = 'ADAS-cog score',\n       y = 'ADCS-MCI-ADL score') +\n  scale_size_continuous(name = 'Leverage') \n```\n\n\n## DFFITS\n\nMit Hilfe der Hebelwerte lassen sich verschiedene Maße erstellen um den Einfluss von Datenpunkten auf das Modell zu überprüfen. Ein Maß wird als \\index{DFFITS} bezeichnet (siehe @eq-dffits)\n\n$$\n(DFFITS)_i = \\frac{\\hat{y}_i - \\hat{y}_{i(i)}}{\\sqrt{\\hat{\\sigma}^2h_i}}\n$${#eq-dffits}\n\nIm Zähler kommen vin @eq-dffits zweimal vorhergesagte $y$-Werte vor. $\\hat{y}_i$ ist dabei der ganz normale Vorhersagewert der uns mittlerweile schon mehrfach begegnet ist. Der zweite Wert $\\hat{y}_{i(i)}$ bezeichnet den vorhergesagten Wert aus dem Modell aus dem der Wert $y_i$ weggelassen wurde. D.h, dass Modell ist mit einem Wert weniger gefittet worden. Daher misst die Differenz $\\hat{y}_i - \\hat{y}_{i(i)}$ den Unterschied in den Vorhersagewerte zwischen zwei Modellen bei denen einmal der Wert $y_i$ zum fitten verwendet wurde und einmal wenn $y_i$ nicht zum fitten verwendet wurde. Umso größer der Unterschied zwischen diesen beiden Werte umso größer ist der Einfluss des Wertes $y_i$ auf den Modellfit. Den Nenner von @eq-dffits lassen wir mal fallen, da es sich dabei nur um einen Normierungswert handelt. Dementsprechend, wird mittels DFFITS für jeden Datenpunkt ein Wert ermittelt und umso größer dieser Wert ist umso größer ist der Einfluss des jeweiligen Datenpunktes auf den Modellfit.\n\nIm idealen Fall sollte alle Datenpunkt ungefähr den gleichen Einfluss haben und einzelne Datenpunkte die einen übermäßig großen Einfluss auf das Modell haben sollten noch einmal genauer inspiziert werden.\n\n::: {.callout-tip}\nAls Daumenregel, kann für kleine bis mittlere Datensätze ein DFFITS von $\\approx 1$ auf Probleme hindeuten, während bei großen Datensätzen $\\approx 2\\sqrt{k/N}$ als Orientierungshilfe verwendet werden kann (k := Anzahl der Prediktoren, N := Stichprobengröße).\n:::\n\n::: {.callout-warning}\nWenn ein Wert außerhalb der Daumenregel liegt, heißt das nicht, dass er automatisch ausgeschlossen werden muss/soll, sondern lediglich inspiziert werden sollte und das Modell mit und ohne diesen Wert interpretiert werden sollte.\n:::\n\nIn `R` können die DFFITS werden mittels der `dffits()`-Funktion berechnet werden. Als Parameter erwartet `dffits()` das gefittete `lm()`-Objekt. Ähnlich wie bei den Residuen, werden die DFFITS-Werte gegen die vorhergesagten $y_i$-Werte graphisch abgetragen um die Wert zu inspizieren und Probleme in der Modellspezifikation zu identifizieren.\n\n```{r}\n#| echo: true\n#| fig.cap: \"Beispiel für DFFITS gegen $\\\\hat{y}_i$\"\n#| label: fig-dffits\n\nplot(adl$y_hat, dffits(mod),\n     ylim=c(-2,2),\n     xlab=expression(hat(y)[i]),\n     ylab='DFFIT-Wert')\nabline(h=c(-1,1), col='red', lty=2)\n```\n\nIn @fig-dffits sind die DFFITS-Werte gegen die vorhergesagten Werte $\\hat{y}_i$ abgetragen und zusätzlich die Daumenregel $\\pm1$ eingezeichnet. Hier ist ein Wert nur gerade so außerhalb des vorgeschlagenen Bereichs. Hier könnte daher sich dieser Datenpunkt noch einmal genauer angeschaut werden, ob bei Ausschluß des Wertes es zu einer qualitativ anderen Interpretation der Daten kommt oder ob bespielsweise Übertragungsfehler für diesen Wert vorliegen oder sonstige Gründe.\n\n## Cooks-Abstand\n\nEin Maß um den Einfluss von einzelnen Datenpunkten auf die Vorhersagewerte $\\hat{y}_i$ über alle Werte abzuschätzen.\n\n$$\nD_i = \\frac{\\sum_{j=1}^N(\\hat{y_j} - \\hat{y}_{j(i)})}{k\\hat{\\sigma}^2}\n$$\n\n### Daumenregel\n\n$D_i > 1$\n\n### In `R`\n\n`cooks.distance()`\n\n## Cooks-Abstand plot\n\n```{r}\n#| fig.cap: \"Cook's $D_i$ gegen $\\\\hat{y}_i$\"\n\nplot(adl$y_hat, cooks.distance(mod), ylim=c(-2,2),\n     xlab=expression(hat(y)[i]),\n     ylab=\"Cook's D\")\nabline(h=c(-1,1), col='red', lty=2)\n```\n\n## DFBETAS\n\nEin Maß für die Veränderung der $\\beta$-Koeffizienten durch einzelne Datenpunkte $i$. \n\n$$\n(DFBETAS)_{k(i)} = \\frac{\\hat{\\beta}_k - \\hat{\\beta}_{k(i)}}{\\sqrt{\\hat{\\sigma}^2c_{kk}}}\n$$\n\n### Daumenregel\n\nFür kleine bis mittlere Datensätze $\\approx 1$ \\\nFür große Datensätze $\\approx 2/\\sqrt{N}$\n\n### In `R`\n\n`dfbeta()`^[Es wird eine Matrize mit $k$-Spalten zurückgegeben.]\n\n## DFBETAS\n\n```{r}\n#| fig.cap: \"DFBETA-Werte für $\\\\beta_0$ und $\\\\beta_1$ gegen $\\\\hat{y}_i$\"\n\nadl <- adl %>% dplyr::mutate(`dfbetas[1]` = dfbeta(mod)[,1],\n                      `dfbetas[2]` = dfbeta(mod)[,2])\nadl %>% dplyr::select(y_hat, `dfbetas[1]`, `dfbetas[2]`) %>%\n  tidyr::pivot_longer(-y_hat) %>%\n  ggplot(aes(y_hat, value)) +\n  geom_point() +\n  facet_grid(~name, labeller = label_parsed) + \n  labs(x = expression(hat(y)[i]), y = 'Veränderung')\n```\n\n## Zusammenfassung\n\nTable: Übersicht über die verschiedene Einflussmaße zur Bewertung der Modellgüte\n\n| Typ | Veränderung | Daumenregel |\n| --- | ---  | ---  |\n| $(DFFITS)_i$ | Vorhersagewert i | $2\\sqrt{k/N}$ |\n| Cook | Durchschnittliche Vorhersagewerte | $>1$ |\n| $(DFBETAS)_{k(i)}$ |  Koeffizient i | $2\\sqrt{N}$ |\n| $e_{Ti}$ | Residuum i  | t-Verteilung(n-k-2)|\n\n\n## Diagnoseplots in R mit `plot(mod)`\n\n\n```{r, echo=T, eval=F}\nplot(mod)\n```\n```{r}\npar(mfrow=c(2,2))\npar(mar=c(1,1,1,1))\nplot(mod)\npar(mfrow=c(1,1))\n```\n\n## Zum Nacharbeiten\n\n@pos_diagnostics\\newline\n@fox2011 [p.294-302]\n\n### Weiterführendes\n\n@young2019\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":2,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"slm_model_fit.html"},"language":{},"metadata":{"lang":"de","fig-responsive":true,"quarto-version":"1.2.258","bibliography":["bibliography.bib"],"theme":"cosmo","callout-icon":true},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":4,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":{"text":"\\usepackage{makeidx,multirow}\n\\makeindex\n"},"include-after-body":{"text":"\\printindex\n"},"output-file":"slm_model_fit.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["bibliography.bib"],"documentclass":"scrreprt"},"extensions":{"book":{}}}}}
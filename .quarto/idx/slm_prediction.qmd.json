{"title":"Vorhersage","markdown":{"headingText":"Vorhersage","containsRefs":false,"markdown":"\n```{r}\n#| echo: false\n#| warning: false\n#| message: false\nsource('_common.R')\n```\n\n## Vorhergesagte Werte $\\hat{y}_i$\n\n```{r defs_reg_03}\njump <- readr::read_delim(paste0('data/running_jump.csv'),\n                          delim=';',\n                          col_types = 'dd')\nmod <- lm(jump_m ~ v_ms, jump)\np <- ggplot(jump, aes(v_ms, jump_m)) + geom_point() + \n  labs(x = 'Anlaufgeschwindigkeit[m/s]',\n       y = 'Sprungweite[m]') \n```\n\nWenn ein einfaches lineares Modell gefittet wurde ist eine zentrale Frage welche Vorhersagen anhand des Modell getroffen werden können. Die Vorhersagen $\\hat{y}_i$ liegen auf der vorhergesagten Regressionsgerade und berechnen sich nach dem Modell für einen gegeben $x$-Wert. \n\n$$\n\\hat{y} = \\hat{\\beta_0} + \\hat{\\beta_0} x\n$$\n\nWie schon mehrfach besprochen unterliegt die Regressionsgerade inherent der Unsicherheit bezüglich der geschätzen Modellkoeffizienten $\\hat{\\beta}_0$ und $\\hat{\\beta}_1$. Diese Unsicherheit überträgt sich auf die geschätzen Werte  $\\hat{y}_i$ und muss daher bei deren Interpretation berücksichtigt werden.\n\nIn @fig-pred-01 sind die bereits behandelten Sprungdaten gegen die Anlaufgeschwindigkeiten zusammen mit der Regressionsgeraden und vorhergesagten Werten (rot) abgetragen.\n\n```{r pred_01}\n#| label: fig-pred-01\n#| fig-cap: \"Vorhersagewerte $\\\\hat{y}_i$ (rote Punkte) für die Sprungdaten.\"\n\np +\n  geom_abline(intercept = coef(mod)[1], slope = coef(mod)[2], col='green') +\n  geom_point(data = data.frame(y_hat = predict(mod),\n                                 v_ms = jump$v_ms),\n               mapping = aes(y = y_hat), color = 'red')\n```\n\nIn `R` können die vorhergesagten Werte des mittels `lm()` gefitteten Modells mit der Hilfsfunktion `predict()` bestimmt werden. Wenn der Funktion `predict()` keine weiteren Parameter außer dem `lm`-Objekt übergeben werden, berechnet `predict()` die vorhergesagten Werte $\\hat{y}_i$ für alle die $x$-Werte die auch zum fitten des Modells benutzt wurden. Die Reihenfolge der Werte $\\hat{y}_i$ enspricht dabei den Werten im Original-`data.frame()`.\n\n\n```{r}\n#| echo=T\n\npredict(mod)[1:5] \n```\n\nWir haben uns hier nur die ersten fünf Werte ausgeben lassen, da nur demonstriert werden soll wie die `predict()`-Funktion angewendet werden kann. Um eine Anwendung zu geben, so können mittels `predict()` die Residuen auch von Hand ohne die `resid()`-Funktion erhalten werden.\n\n```{r}\n#| echo=T\n\n(jump$jump_m - predict(mod))[1:5]\nresid(mod)[1:5]\n```\n\nWiederum nur zur Demonstration die ersten fünf Wert um die Äquivalenz der beiden Methoden zu demonstrieren.\n\nMeistens liegt das Interesse jedoch weniger auf den vorhergesagten Werten $\\hat{y}_i$ für die gemessenen Werte, sondern es sollen Werte vorhergesagt werden für $x$-Werte die nicht im Datensatz enthalten sind. Operational ändert sich nichts, es wird immer noch das gefittete Modell verwendetet und es müssen lediglich neue $x$-Werte übergeben werden.\n\nIn `R` kann dies mittels des zweite Parameter in `predict()` erreicht werden. Soll zum Beispiel die Sprungweite für eine Anlaufgeschwindigkeit von $v = 11.5[m/s]$ berechnen werden, muss zunächst ein neues `tibble()` erstellt werden, welches den gewünschten $x$-Wert enthält. Dabei muss der Spaltenname in dem neuen `tibble()` demjenigen im Original-`tibble()` entsprechen. Ansonsten funktioniert die Anwendung von `predict()` nicht.\n\n\n```{r}\n#| echo: true\n\ndf <- tibble(v_ms = 11.5)\ndf\n```\n\nDieses `tibble()` kann nun zusammen mit dem `lm()`-Objekt an `predict()` übergeben werden.\n\n```{r}\n#| echo: true\n\npredict(mod, newdata = df)\n```\n\nD.h., bei einer Anlaufgeschwindigkeit von $v = 11.5[m/s]$ ist anhand des Modells eine Sprungweite von $`r round(predict(mod, newdata=df),1)`m$ zu erwarten.\n\n## Unsicherheit in der Vorhersage \n\nWie schon angesprochen ist unser Modell natürlich mit Unsicherheiten behaftet. Diese drücken sich in den Standardfehler für die beiden Koeffizienten $\\hat{\\beta_0}$ und $\\hat{\\beta_1}$ (siehe @tbl-pred-01).\n\n```{r}\n#| label: tbl-pred-01\n#| tbl-cap: Modellparameter und Standardfehler\n \nbroom::tidy(mod) |> select(term, estimate, \"std.error\") |> \n  knitr::kable(\n    booktabs = T,\n    col.names = c('', 'Schätzer', '$s_e$'),\n    digits = 2\n  )\n```\n\n\nDer vorhergesagte Wert $\\hat{y}$ ist daher für sich alleine ist noch nicht brauchbar, da auch Informationen über dessen Unsicherheit notwendig sind um die Ergebnisse korrekt zu interpretieren.\n\nEs können zwei unterschiedliche Anwendungsfälle voneinander unterschieden werden. \n\n1. Der mittlere, erwartete Wert $\\hat{\\bar{y}}_{neu}$\n2. Die Vorhersage eines einzelnen Wertes  $\\bar{y}_{neu}$\n\nIm konkreten Fall werden damit zwei unterschiedliche Fragestellungen beantwortet. Im 1. Fall lautet die Frage, ich habe eine Trainingsgruppe und möchte wissen was der mittlere Wert der Gruppe anhand des Modells ist, wenn alle eine bestimmte Anlaufgeschwindigkeit $v_{neu}$ haben. Im 2. Fall lautet die Frage welche Weite eine einzelne Athletin für die Anlaufgeschwindigkeit $v_{neu}$ springen sollte. In beiden Fällen werden keiner genau den Wert des Regressionsmodells treffen, aber im 1. Fall der Gruppe werden sich Streuungen nach oben bzw. nach unten gegenseitig im Schnitt ausbalancieren während im 2. Fall der einzelnen Athletin dies nicht der Fall ist. Daher hat die Vorhersage im 2. Fall eine höhere Unsicherheit. Diese Unterschied sollte sich dementsprechend in den Varianzen der beiden Vorhersagen wiederspiegeln.\n\nWie bereits erwähnt, der vorhergesagte Wert $\\hat{y}_{neu}$ ist in beiden Fällen gleich und entsprecht der oben beschriebenen Methode anhand des Modell $y_{neu} = \\hat{\\beta}_0 + \\hat{\\beta}_1 \\times x_{\\text{neu}}$. \n\n\nFür den erwarteten Mittelwert errechnet sich die Varianz nach:\n\n\\begin{equation}\nVar(\\hat{\\bar{y}}_{neu}) = \\hat{\\sigma}^2 \\left[\\frac{1}{n} + \\frac{(x_{neu} - \\bar{x})^2}{\\sum(x_i - \\bar{x})^2}\\right] = \\hat{\\sigma}_{\\hat{\\bar{y}}_{neu}}^2\n\\end{equation}\n\nDas dazugehörige Konfidenzintervall errechnet sich danach mittels:\n\n\\begin{equation}\n\\hat{\\bar{y}}_{neu} \\pm q_{t(1-\\alpha/2;n-2)} \\times \\hat{\\sigma}_{\\hat{\\bar{y}}_{neu}}\n\\end{equation}\n\nDie Varianz für die Vorhersage eines einzelnen Wertes errechnet sich:\n\n\\begin{equation}\nVar(\\hat{y}_{neu}) = \\hat{\\sigma}^2 \\left[1 + \\frac{1}{n} + \\frac{(x_{neu} - \\bar{x})^2}{\\sum(x_i - \\bar{x})^2}\\right] = \\hat{\\sigma}^2 + \\hat{\\sigma}_{\\hat{\\bar{y}}_{neu}}^2 = \\hat{\\sigma}_{\\hat{y}_{neu}}^2\n\\end{equation}\n\nWas wiederum zu dem folgenden Konfidenzintervall führt:\n\n\\begin{equation}\n\\hat{y}_{neu} \\pm q_{t(1-\\alpha/2;n-2)} \\times \\hat{\\sigma}_{\\hat{y}_{neu}}\n\\end{equation}\n\nIn beiden Fällen ist der Term\n\n$$\n\\frac{(x_{neu} - \\bar{x})^2}{\\sum(x_i - \\bar{x})^2}\n$$\n\nenthalten. Anhand des Zählers kann abgeleitet werden, dass die Unsicherheit der Vorhersage mit dem Abstand vom Mittelwert der $x$-Werte zunimmt. Rein heuristisch macht dies Sinn, da davon ausgegangen werden kann, dass um den Mittelwert der $x$-Werte auch die meiste Information über $y$ vorhanden ist und dementsprechend umso weiter die Werte sich vom $\\bar{x}$ entfernen die Information abnimmt. Im Nenner ist wiederum wie auch beim Standardfehler $\\sigma_{\\beta_1}$ des Steigungskoeffizienten $\\beta_1$ zu sehen, dass die Varianz abnimmt mit der Streuung der $x$-Werte. Daher, wenn eine Vorhersage in einem bestimmten Bereich von $x$-Werten durchgeführt werden soll, dann sollte darauf geachtet werden möglichst diesen Bereich auch zu samplen um die Unsicherheit so klein wie möglich zu halten.\n\n\n## Vorhersagen in R mit `predict()`\n\n### Erwarteter Mittelwert\n```{r}\n#| echo=T\ndf <- data.frame(v_ms = 11.5) # oder tibble(v_ms = 11.5)\npredict(mod, newdata = df, interval = 'confidence')\n```\n\n### Individuelle Werte\n```{r, echo=T}\npredict(mod, newdata = df, interval = 'prediction')\n```\n\n## Konfidenzintervalle graphisch\n\n```{r}\nnewdata <- data.frame(v_ms = seq(6, 14, length.out = 30))\nci_co <- predict(mod, newdata = newdata, interval = 'confidence')\nnewdata$y_hat <- ci_co[,1]\nnewdata$ci_low <- ci_co[,2]\nnewdata$ci_up <- ci_co[,3]\nnewdata$jump_m <- newdata$y_hat \nci_pr <- predict(mod, newdata = newdata, interval = 'predict')\nnewdata <- newdata %>% dplyr::mutate(y_hat = ci_co[,1],\n                              ci_low = ci_co[,2], ci_up = ci_co[,3],\n                              pr_low = ci_pr[,2], pr_up = ci_pr[,3])\np + geom_line(data = newdata, aes(x = v_ms, y = y_hat)) +\n  geom_abline(intercept = coef(mod)[1], slope = coef(mod)[2])  +\n  geom_ribbon(data = newdata, aes(x = v_ms, ymin = pr_low, ymax = pr_up), alpha = .5) + \n  geom_ribbon(data = newdata, aes(ymin = ci_low, ymax = ci_up), alpha = .5, fill='red') +\n  lims(x = c(6,12))\n```\n\nWeiterführende Literatur sind @kutner2005\n\n## $R^2$ und Root-mean-square\n\n```{r}\nset.seed(12)\nn <- 4\nsimple <- tibble(x = 0:(n-1),\n                 y = 2 + 0.5 * x + rnorm(n,0,.5))\nmod0 <- lm(y ~ x, simple)\nsimple$y_hat <- predict(mod0)\nsimple$epsilon <- paste0('epsilon[',1:n,']')\nsimple$ys <- paste0('list(x[',1:n,'],y[',1:n,'])')\nsimple$yshat <- paste('hat(y)[',1:n,']')\n```\n\n## Einfaches Modell\n\n\\scriptsize\n```{r}\n#| echo: true\n\nmod0 <- lm(y ~ x, simple)\nsummary(mod0)\n```\n\n\n## Nochmal Abweichungen\n\n1. **Gesamtvarianz**:\n$$\nSSTO := \\sum_{i=1}^N (y_i - \\bar{y})^2\n$$\n2. **Regressionsvarianz**: \n$$\nSSR :=\\sum_{i=1}^N(\\hat{y}_i - \\bar{y})^2\n$$\n\n3. **Residualvarianz**:\n$$\nSSE := \\sum_{i=1}^N (y_i - \\hat{y}_i)^2\n$$\n\n```{r}\n#| fig.cap: \"Minimalmodell der Abweichungen\"\n\ny_av <- mean(simple$y)\ntext_size <- 7\nggplot(simple, aes(x,y,label = epsilon)) + \n  geom_segment(aes(x = x, y = y_hat, xend = x, yend = y),\n               arrow = arrow(type='closed', length=unit(0.05, unit='npc')), size=1.5,\n               color = 'green') +\n  geom_line(aes(y = y_hat), size=2, color = 'red') +\n  geom_segment(aes(x = x+0.1, y = y_av, xend = x+0.1, yend = y),\n               color = 'blue', size = 1.5,\n               arrow = arrow(type = 'closed', length=unit(0.05, unit='npc'))) +\n  geom_segment(aes(x = x-0.1, y = y_av, xend = x-0.1, yend = y_hat),\n               size = 1.5, color = 'gray30',\n               arrow = arrow(type = 'closed', length=unit(0.05, unit='npc'))) +\n  geom_hline(yintercept = y_av, size = 2) +\n  geom_point(size=7) +\n  geom_point(aes(y = y_hat), size=7, color = 'red') +\n  geom_text(x = 2, y = 2, label = 'SSTO==y[i]-bar(y)', parse=T,\n            size=text_size, color = 'blue') +\n  geom_text(x = 2, y = 1.7, label = 'SSR==hat(y[i])-bar(y)', parse=T,\n            size=text_size, color = 'gray30') +\n  geom_text(x = 2, y = 1.4, label = 'SSE==y[i]-hat(y[i])', parse=T,\n            size=text_size, color = 'green') +\n  geom_text(x = 0, y = y_av+0.15, label = 'bar(y)', parse=T,\n            size = text_size) \n```\n\n## Verhältnis von $SSR$ zu $SSTO$\n\n\n```{r}\n#| fig.cap: \"Perfekter Zusammenhang\"\n\nggplot(simple, aes(x,y_hat,label = epsilon)) + \n  geom_line(aes(y = y_hat), size=2, color = 'red') +\n  geom_segment(aes(x = x+0.1, y = y_av, xend = x+0.1, yend = y_hat),\n               color = 'blue', size = 3,\n               arrow = arrow(type = 'closed', length=unit(0.05, unit='npc'))) +\n  geom_segment(aes(x = x-0.1, y = y_av, xend = x-0.1, yend = y_hat),\n               size = 2, color = 'gray30',\n               arrow = arrow(type = 'closed', length=unit(0.05, unit='npc'))) +\n  geom_hline(yintercept = y_av, size = 2) +\n  geom_point(size = 9, color = 'red') +\n  geom_point(size = 3) +\n  labs(x = 'X', y = 'Y') +\n  lims(x = c(-0.2,3.3), y = c(1, 3.5)) +\n  geom_text(x = 2, y = 2, label = 'SSTO==y[i]-bar(y)', parse=T,\n            size=text_size, color = 'blue') +\n  geom_text(x = 2, y = 1.7, label = 'SSR==hat(y[i])-bar(y)', parse=T,\n            size=text_size, color = 'gray30') +\n  geom_text(x = 2, y = 1.4, label = 'SSE==y[i]-hat(y[i])', parse=T,\n            size=text_size, color = 'green') + geom_point(aes(y = y_hat), size=7) \n```\n\n$$\n\\frac{SSR}{SSTO} = 1\n$$\n\n```{r}\n#| fig.cap: \"Kein Zusammenhang\"\n\nsimple$rnd <- y_av + c(0.5, -1.0, 0.8, -.5)\nggplot(simple, aes(x, rnd)) + \n  geom_segment(aes(x = x, y = y_av, xend = x, yend = rnd),\n               arrow = arrow(type='closed', length=unit(0.05, unit='npc')), size=2,\n               color = 'green') +\n  geom_hline(yintercept = y_av, size = 2) +\n  geom_line(aes(y = y_av), size=2, color = 'red') +\n  geom_segment(aes(x = x+0.1, y = y_av, xend = x+0.1, yend = rnd),\n               color = 'blue', size = 3,\n               arrow = arrow(type = 'closed', length=unit(0.05, unit='npc'))) +\n  geom_point(size=7) +\n  labs(x = 'X', y = 'Y') +\n  lims(x = c(-0.2,3.3), y = c(1, 3.5)) +\n  geom_text(x = 2, y = 2, label = 'SSTO==y[i]-bar(y)', parse=T,\n            size=text_size, color = 'blue') +\n  geom_text(x = 2, y = 1.7, label = 'SSR==hat(y[i])-bar(y)', parse=T,\n            size=text_size, color = 'gray30') +\n  geom_text(x = 2, y = 1.4, label = 'SSE==y[i]-hat(y[i])', parse=T,\n            size=text_size, color = 'green') +\n  geom_point(aes(y = y_av), size = 7, color = 'red') \n```\n\n$$\n\\frac{SSR}{SSTO} = 0\n$$\n\n## Determinationskoeffizient $R^2$\n\nEs gilt: $SSTO = SSR + SSE$\n\n$$\nR^2 = \\frac{SSR}{SSTO} = 1 - \\frac{SSE}{SSTO} \\in [0,1] \n$$\n^[Bei der einfachen Regression gilt: $r_{xy} = \\pm\\sqrt{R^2}$]\n\n### Korrigierter Determinationskoeffizient $R_a^2$\n\n$$\nR_a^2 = 1 - \\frac{\\frac{SSE}{n-p}}{\\frac{SSTO}{n-1}} = 1 - \\frac{n-1}{n-p}\\frac{SSE}{SSTO}\n$$\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":2,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"slm_prediction.html"},"language":{},"metadata":{"lang":"de","fig-responsive":true,"quarto-version":"1.2.258","bibliography":["bibliography.bib"],"theme":"cosmo","callout-icon":true},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":4,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":{"text":"\\usepackage{makeidx,multirow}\n\\makeindex\n"},"include-after-body":{"text":"\\printindex\n"},"output-file":"slm_prediction.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["bibliography.bib"],"documentclass":"scrreprt"},"extensions":{"book":{}}}}}
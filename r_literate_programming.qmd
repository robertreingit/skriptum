# Literate programming in `R`

Literate programming ist eine Methode, um Programmcode und Dokumentation in einer natürlichen Sprache miteinander zu verbinden. Dabei wird der Programmiercode in kleine, verständliche Einheiten (sogenannte Chunks) unterteilt, die mit Kommentaren und Erklärungen versehen werden. Diese Einheiten werden dann in einer logischen Reihenfolge angeordnet, die dem Leser den Zweck und die Funktionsweise des Programms vermittelt. Literate programming fördert die Wiederverwendbarkeit, Lesbarkeit und Wartbarkeit von Code. Dies bietet darüber hinaus auch die Möglichkeit dynamische Dokumente aus `R` heraus zu generieren bei denen Daten, deren Verarbeitung und die Dokumentation und Interpretation in einer Einheit integriert sind. Letztendlich entsteht so die Möglichkeit auch direkt fertig formatierte Publikationen aus `R` heraus zu generieren.

In `R` gibt es derzeit drei, eigentlich zweieinhalb, verschiedene Methoden um literatue programming durchzuführen. Das klassische RSweave-Format, dass auf der Integration von `R`-Code und *LaTex* beruht, das modernere RMarkdown bei dem `R`-Code und Markdown-Syntax miteinander verbunden werden und die überarbeitete Version von RMarkdown genannt Quarto-Dokumenten, bei denen ebenfalls `R`-Code mit Markdown integriert wird und mittels einer YAML-Syntax gesteuert wird. Wir werden uns mit der neuesten Variante, den Quarto-Dokumenten beschäftigen.

## `R` Projekte

## Quarto-Dokumente

Bei Quarto-Dokumenten handelt es sich um Dateien mit der Endung `.qmd`, die gleichzeitig Text wie auch `R`-Code enthalten können. Die Textsegmente sind dabei nicht nur einfache Kommentare (`#`) im Code, sondern vollständig formatierte Textsegmente, wie wir sie aus Word und ähnlichen Programmen kennen. Die Formatierung der Textkomponenten erfolgt mit der sogenannten Markdown-Syntax. Markdown ist eine einfache Auszeichnungssprache die es erlaubt Formatierungsanweisungen in den Text zu integrieren.

Soll zum Beispiel eine Wort fett gedruckt werden, dann wird das Wort mit zwei `**` eingeschlossen. In @tbl-markdown-text-formatting sind ein paar Beispiel angezeigt.

+-----------------------------------------+-----------------------------------------+
| Markdown Syntax                         | Formatierung                            |
+=========================================+=========================================+
| ``` markdown                            | *kursiv*, **fett**, ***fett kursiv***   |
| *kursiv*, **fett**, ***fett kursiv***   |                                         |
| ```                                     |                                         |
+-----------------------------------------+-----------------------------------------+
| ``` markdown                            | hochgestellt^2^ / tiefgestellt~2~       |
| hochgestellt^2^ / tiefgestellt~2~       |                                         |
| ```                                     |                                         |
+-----------------------------------------+-----------------------------------------+
| ``` markdown                            | ~~durchgestrichen~~                     |
| ~~durchgestrichen~~                     |                                         |
| ```                                     |                                         |
+-----------------------------------------+-----------------------------------------+

: Beispiele für Textformatierung mit Markdown {#tbl-markdown-text-formatting}

Überschriften werden in Markdown mittels des `#` Zeichens definiert. Die Zeile wird dabei mit einem `#` begonnen, und per default sind sechs Stufen definiert, die dann auch entsprechend abgstuft nummeriert werden. In @tbl-markdown-header sind ein paar Beispiel (ohne die Nummerierung) abgebildet.

+------------------+------------------------+
| Markdown Syntax  | Formatierung           |
+==================+========================+
| ``` markdown     | # Überschrift 1 {-}    |
| # Überschrift 1  |                        |
| ```              |                        |
+------------------+------------------------+
| ``` markdown     | ## Überschrift 2 {-}   |
| ## Überschrift 2 |                        |
| ```              |                        |
+------------------+------------------------+
| ``` markdown     | ### Überschrift 3 {-}  |
| ### Überschrift 3|                        |
| ```              |                        |
+------------------+------------------------+

: Beispiel für Überschriftenformatierung mit Markdown {#tbl-markdown-header}

Die Formatierungsmöglichkeiten in Quarte sind überaus umfangreich und können daher an dieser Stelle nicht alle zusammen gefasst werden. Da immer wieder neue Features dazu kommen ist die erste Adresse die sehr gute Dokumentation von [Quarto](https://quarto.org/docs/guide/).

`R` Code der ausgeführt werden soll wird in ein Quarto-Dokument mittels sogenannter Chunks oder Code blocks integriert.

Codeblöcke werden mittels spezieller Formatierungszeichen angezeigt. Am Anfang stehen drei backticks (SHIFT+´) gefolgt von `{r}`, während der Codeblock mittels dreier backticks geschlossen wird. ```` ```{r} R Code````). Diese Codeblöcke werden während des rendern, also des Formatierens von Quarto ausgeführt. 

::: {.callout-tip}
In R-Studio gibt es glücklicherweise einen short-cut um einen Codeblock einzufügen (STRG+SHIFT+i).
:::

```` markdown
```{{r}}
a <- 3
b <- 4
a + b
```
````

Die Variablen die in den jeweiligen Codeblöcken definiert werden stehen in weiteren nachfolgenden Codeblöcken in dem Quartodokument zur Verfügung.

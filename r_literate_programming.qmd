# Literate programming in `R`

Literate programming ist eine Methode, um Programmcode und Dokumentation in einer natürlichen Sprache miteinander zu verbinden. Dabei wird der Programmiercode in kleine, verständliche Einheiten (sogenannte Chunks) unterteilt, die mit Kommentaren und Erklärungen versehen werden. Diese Einheiten werden dann in einer logischen Reihenfolge angeordnet, die dem Leser den Zweck und die Funktionsweise des Programms vermittelt. Literate programming fördert die Wiederverwendbarkeit, Lesbarkeit und Wartbarkeit von Code. Dies bietet darüber hinaus auch die Möglichkeit dynamische Dokumente aus `R` heraus zu generieren bei denen Daten, deren Verarbeitung und die Dokumentation und Interpretation in einer Einheit integriert sind. Letztendlich entsteht so die Möglichkeit auch direkt fertig formatierte Publikationen aus `R` heraus zu generieren.

In `R` gibt es derzeit drei, eigentlich zweieinhalb, verschiedene Methoden um literatue programming durchzuführen. Das klassische RSweave-Format, dass auf der Integration von `R`-Code und *LaTex* beruht, das modernere RMarkdown bei dem `R`-Code und Markdown-Syntax miteinander verbunden werden und die überarbeitete Version von RMarkdown genannt Quarto-Dokumenten, bei denen ebenfalls `R`-Code mit Markdown integriert wird und mittels einer YAML-Syntax gesteuert wird. Wir werden uns mit der neuesten Variante, den Quarto-Dokumenten beschäftigen.

Bei Quarto handelt es sich um ein Open-Source System für wissenschaftliche und technische Veröffentlichungen. Mittels Quarto eine ganze Reihe von unterschiedlichen Dokumenten erstellt werden von Zeitschriftenartikel, über Bücher bis zu kompletten Webseiten. Tatsächlich ist auch das vorliegende Skriptum ebenfalls mit Quarto erstellt.

## `R` Projekte

Bevor wir mit Quarto anfangen, lernen wir kurz noch `R`-Projekte kennen, da diese eine deutliche Vereinfachung des Arbeitsprozesses mit `R` ermöglichen.

Wenn ihr eine Datenanalyse durchführt, ist es von großem Vorteil wenn alle für die Analyse notwendigen Informationen wie Daten, Ergebnisse, Zwischenrechnungen usw. irgendwo zusammen liegen. Am einfachsten in einem Verzeichnisordner den ihr mit Unterordnern weiter strukturiert. So kann sicher gestellt werden, dass wenn ihr zu einem späteren Zeitpunkt zu eurem Projekt wieder zurückkehrt ihr dort weitermachen könnt wo ihr vorher aufgehört hat. In `R` gibt es einen Prozess der diese Arbeitsweise stärker formalisiert. Dazu könnt ihr in RStudio ein **project** erstellen.

Sobald ihr ein Projekt mit RStudio erstellt habt, d.h. einen Namen für das Projekt und ein Verzeichnis, das Wurzelverzeichnis,  gewählt hat, springt `R` in das Wurzelverzeichnis und macht dieses zum Arbeitsverzeichnis. Im Wurzelverzeichnis könnt ihr weitere Unterverzeichniss wie zum Beispiel *data*, *specs* oder was auch immer ihr benötigt erstellen. In RStudio könnt ihr das Projekt öffnen oder schließen, je nachdem was ihr gerade machen wollt. Bei Öffnen sprint `R` immer ins Wurzelverzeichnis.

Eine Regel solltet ihr im Umgang mit Projekten beachten. Wann immer ihr auf eine Datei zugreifen wollt, dann solltet ihr relative Pfadangabe verwenden. Also, anstatt `D:/studium/master/data/studie_01.txt`, wenn euer Projektverzeichnis master ist, einfach `/data/studie_01.txt`. Wenn ihr relative Pfade benutzt, hat dies nämlich den Vorteil, dass ihr euer Projekt problemlos zwischen Rechnern transferieren (migrieren) könnt. Die relativen Pfade stellen sicher, dass die Position von Dateien immer in Relation zum Wurzelverzeichnis des Projekt lokalisiert werden.

Wenn ihr ein Projekt in RStudio neu erstellt, dann generiert RStudio eine Konfigurationsdatei mit der Endung `.Rproj` in der noch weitere Einstellungen gespeichert werden. Ihr könnt die Projekteinstellungen über den Menupunkt (Tools/Project Options) anpassen.

## Quarto-Dokumente

### Markdown

Bei Quarto-Dokumenten handelt es sich um Dateien mit der Endung `.qmd`, die gleichzeitig Text wie auch `R`-Code enthalten können. Die Textsegmente sind dabei nicht nur einfache Kommentare (`#`) im Code, sondern vollständig formatierte Textsegmente, wie wir sie aus Word und ähnlichen Programmen kennen. Die Formatierung der Textkomponenten erfolgt mit der sogenannten Markdown-Syntax. Markdown ist eine einfache Auszeichnungssprache die es erlaubt Formatierungsanweisungen in den Text zu integrieren.

Soll zum Beispiel eine Wort fett gedruckt werden, dann wird das Wort mit zwei `**` eingeschlossen. In @tbl-markdown-text-formatting sind ein paar Beispiel angezeigt.

+-----------------------------------------+-----------------------------------------+
| Markdown Syntax                         | Formatierung                            |
+=========================================+=========================================+
|                                         | *kursiv*, **fett**, ***fett kursiv***   |
| `*kursiv*, **fett**, ***fett kursiv***` |                                         |
+-----------------------------------------+-----------------------------------------+
|                                         | hochgestellt^2^ / tiefgestellt~2~       |
| `hochgestellt^2^ / tiefgestellt~2~`     |                                         |
+-----------------------------------------+-----------------------------------------+
|                                         | ~~durchgestrichen~~                     |
| `~~durchgestrichen~~`                   |                                         |
+-----------------------------------------+-----------------------------------------+

: Beispiele für Textformatierung mit Markdown {#tbl-markdown-text-formatting}

D.h. die Formatierung von Text wird mit solchen relativ einfach sich zu merkenden Sonderzeichen durchgeführt. So können beispielsweise Listen mittels der folgenden Formatierung definiert werden (siehe @tbl-markdown-lists).

+-----------------------------------+-----------------------------------+
| Markdown Syntax                   | Formatierung                      |
+===================================+===================================+
|                                   |                                   |
|| * ungeordnete Liste              | * ungeordnete Liste               |
||     + Unterelement 1             |     + Unterelement 1              |
||     + Unterelement 2             |     + Unterelement 2              |
||         - Unterunterelement 1    |         - Unterunterelement 1     |
|                                   |                                   |
+-----------------------------------+-----------------------------------+
|                                   |                                   |
|| 1. geordnete Liste               |  1. geordnete Liste               |
|| 2. Element 2                     |  2. Element 2                     |
||    i) Unterelement 1             |     i) Unterelement 1             |
||       A.  Unterunterelement 1    |        A.  Unterunterelement 1    |
|                                   |                                   |
+-----------------------------------+-----------------------------------+

: Beispiele für Listenformatierungen mit Markdown {#tbl-markdown-lists}

Quarto bietet alle nur erdenklichen Formatierungsmöglichkeiten und Feinheiten um die gewünschten Formatierungen einzustellen. Daher wird im Rahmen dieses Skript nicht weiter darauf eingegangen werden. Da Quarto zudem ein noch relativ neues Projekt ist kommen immer wieder neue Features dazu. Daher ist die sehr gute Dokumentation von [Quarto](https://quarto.org/docs/guide/) immer die erste Adresse für alle Fragen.

### `R`-Code in Quarto-Dokumenten

`R` Code der ausgeführt werden soll wird in ein Quarto-Dokument mittels sogenannter Chunks (auch Code blocks genannt) integriert.

Solche Codeblöcke werden ebenfalls mittels spezieller Formatierungszeichen ausgezeichnet. Der Anfang eines Codeblocks wird mit drei backticks (SHIFT+´) gefolgt von `{r}` eingeleitet. Das Endes des Codeblock wird mittels dreier backticks abgeschlossen. ```` ```{r} R Code````). Diese Codeblöcke werden während des rendern, also des Formatierens des Quarto-Dokuments, intern mit `R` ausgeführt. 

::: {.callout-tip}
In R-Studio ist der short-cut {{< kbd win=STRG+SHIFT+i >}} definiert um einen Codeblock an der aktuellen Cursorposition einzufügen.
:::

Ein Beispiel für einen einfachen Codeblock sind dann wie folgt aus:

```` markdown
```{{r}}
a <- 3
b <- 4
a + b
```
````

Die Variablen die in den jeweiligen Codeblöcken definiert werden stehen in weiteren, nachfolgenden Codeblöcken in dem Quartodokument zur Verfügung. 

::: {.callout-info}
Einzelne Codeblöcke können in R-Studio getrennt ausgeführt werden. Dazu muss der Cursor in dem Block sein und entweder mit PLAY-Button oben-recht im Block oder mit dem short-cut {{< kbd win=STRG+SHIFT+ENTER >}}.
Um das ganze Dokument zu rendern kann entweder der Render-Button oberhalb des Dokuments verwendet werden oder wiederum der short-cut {{< kbd win=STRG+SHIFT+k >}}. 
:::

Wenn wir unseres vorhergehendes Workflow-Beispiel nehmen, dann könnte ein gekürztes Quarto-Dokument wie folgt aussehen:

```` markdown
---
title: "Analyse des Körperfettgehalts in zwei Gruppen"
author: "Martina Muster"
---
# Einleitung

Nach Schmidt et al. (2023) ist davon auszugehen, dass eine Manipulation von XYZ
dazu führt, dass ... . Diese Hypothese soll anhand einer neuen Stichprobe
überprüft werden.

# Methodik

...

# Analyse

## Bibliotheken

Für die Bearbeitung der Daten, werden die folgenden Bibliotheken benötigt.
```{{r}}
library(readr)
library(ggplot2)
library(dplyr)
```

## Daten einlesen

Die Rohdaten befinden sich in der Textdatei "bfp_data.txt".
**Achtung**, darauf achten, dass der Dateipfad korrekt ist.

```{{r}}
bfp <- read_csv(file = 'bfp_data.txt')
```

## Daten bearbeiten
Ein Datenpunkt ist ~fehlerhaft~, und zeigt einen Wert von $BFP > 100$, was
nicht physiologisch plausibel. Daher wird dieser Wert ausgeschlossen.

```{{r}}
bfp_clean <- filter(bfp, BFP <= 100)
```

Die Daten zur Analyse befinden sich jetzt in der Variablen `bfp_clean`.

# Diskussion

...

# Zusammenfassung

...
````

Zu Beginn des Quarto-Dokuments findet sich ein Abschnitt der mit ```` --- ```` abgegrenzt ist. Dies ist der sogenannte YAML-Header. YAML ist ebenfalls eine einfache Auszeichnungssprache (**yet** **a**nother **m**arkup **l**anguage). Im Header werden verschiedene Formatierungseinstellung für das Quarto-Dokument definiert. Hier können zum Beispiel auch weitere Dokumente wie Zitationsbibliotheken und Zitationsstyle eingebunden werden, da Quarte Referenzen und Zitationen innerhalb der Dokumente unterstützt. Wie bereits erwähnt ist das Quarto-System sehr umfangreich und kann hier leider nicht weiter besprochen werden.


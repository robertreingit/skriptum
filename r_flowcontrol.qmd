# Ablaufkontrolle 

```{r}
#| echo: false
#| warning: false
#| message: false
source('_common.R')
knitr::opts_chunk$set(
  prompt = TRUE,
  echo = TRUE
)
```

## Vergleiche 

```{r}
#| echo: true
m <- 1:6  # <1>
m[m < 3]  # <2>
```

1. Der Variable `m` wird mit einem Vektor mit den Werten $[1,2, \dots, 6]$ gefüllt.
2. Mittels eines Vergleichs werden alle Werte kleiner $3$ ausgegeben.

## Bedingte Anweisungen und Verzweigungen 

```{mermaid}
flowchart
A[condition] --> B[TRUE]
A[condition] --> C[FALSE]
B --> D[Ausdruck A]
C --> E[Ausdruck B]
```


`if () {} else {}`

```{r}
#| eval: false
#| echo: true

if (condition) { # <1>
  AusdruckA      # <2>
} else {         # <3>
  AusdruckB      # <4> 
}

```

1. `condition` wird zu einem truth-Wert (`true,false`) evaluiert
2. Wenn `condition` `TRUE` ist, wird `AusdruckA` ausgeführt.
3. Wenn `condition` `FALSE` ist, wird der `else` Zweig ausgeführt.
4. Im `else`-Zweig wird `AusdruckB` ausgeführt.

Beispiel

```{r}
#| echo: true
m <- 0
a <- 10
b <- 20
if (a < b) {
  m <- 10
} else {
  m <- 20
}
m
```


## Schleifen

```{mermaid}
%%| fig-height: 4

stateDiagram-v2
[*] --> item
item --> Vector
Vector --> item
item --> Ausdruck
item --> [*]
```


```{r}
#| eval: false
#| echo: true

for (item in vector) { # <1>
  Ausdruck             # <2>
}

```

1. In der Klammer werden zwei Ausdrücke benötigt. `item` ist ein Zähler der die Einträge des Vektors `vector` durchläuft.
2. Jedes Mal wenn `item` mit einem neuen Wert belegt worden ist, wird `Ausdruck` ausgeführt und der jeweilige Wert von `item` steht im Ausdruck zur Verfügung.

Beispiel

```{r}
#| echo: true

vec <- c('mama','papa','daughter','son') 
for (i in 1:4) {
  cat(i, ': ', vec[i], '\n')
}
```

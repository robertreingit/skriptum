# Ablaufkontrolle 

```{r}
#| echo: false
#| warning: false
#| message: false
source('_common.R')
knitr::opts_chunk$set(
  prompt = TRUE,
  echo = TRUE
)
```

Nachdem wir die Grunddatentypen in `R` kennengelernt haben, schauen wir uns nun drei zentrale Konstrukte der Programmierung an. Das sind Vergleiche, darauf aufbauend Bedingte Anweisungen und Verzweigungen und Schleifen. Fangen wir mit den Vergleichen an.

## Vergleiche 

Bei Vergleichen wird zunächst einmal genau das gemacht, was im Namen drinsteht, es werden Sachen miteinander verglichen. Und wenn ich Sachen schreibe, dann vor allem erst einmal Zahlen. Wenn wir Zahlen miteinander vergleichen, dann kennen wir die Grundoperatoren noch aus der Schule (siehe @tbl-comparisons).

| Operator | Vergleich |
| --- | --- |
| $<$ | kleiner |
| $>$ | größer |
| $<=$ | kleiner oder gleich |
| $>=$ | größer oder gleich |
| $==$ | gleich |

: Vergleichsoperatoren {#tbl-comparisons}

Der einzige Vergleichsoperator der etwas ungewohnt erscheinen dürfte ist der Vergleich auf Gleichheit `==`. Das einfache Gleichheitszeichen `=` ist ähnlich dem Zuweisungsoperator `<-`, daher wird ein weiteres Zeichen verwendet und das ist eben das doppelte Gleichheitszeichen `==`. Letztendlich ist das aber wieder nur Syntax die sich gemerkt werden muss. Wichtiger, in `R` ist das Ergebnis eines Vergleichs ein logischer Wert.

```{r}
#| echo: true

3 < 6
6 < 3
6 == 6
```

In allen drei Fällen sehen wir als Ergebnis der Vergleichsausdrücke einen logischen Wert. Die Vergleichsoperator funktionieren auch mit Vektoren.

```{r}
#| echo: true
v_1 <- 1:6
v_2 <- 2:7
v_1 < 3
3 < v_1
v_1 < v_2
```

Wenn beide Objekte Vektoren sind, dann wird der Vergleich Element für Element durchgeführt, während bei einem Vergleich mit einem Skalar alle Vektorelemente mit dem Skalar verglichen werden. In beiden Fällen ist das Ergebnis des Ausdrucks wieder Vektor der entsprechenden Länge mit logischen Einträgen.

Zusammen mit dem subsetting operator `[]` können wir mit relativ wenig Aufwand Werte die eine bestimmte Bedingung erfüllt aus einem Vektor extrahieren. Zum Beispiel aus dem Vektor `v_1` alle Werte die kleiner $4$ sind.

```{r}
#| echo: true

v_1[v_1 < 4]
```

Warum hat das funktioniert? Zuerst wird der Vergleich `v_1 < 4` von `R` durchgeführt, der Rückgabewert dieser Operation ist ein Vektor mit logischen Werten entsprechend des Vergleichs. Der Vektor hat die Länge von `v_1`, kann daher direkt dazu benutzt werden Elemente aus `v_1` die die Bedingung erfüllen mit dem subsetting Operator `[]` zu extrahieren.

Da wir logische Wert mit den logischen Operatoren verknüpfen können, ermöglicht dies auch komplizierte Vergleiche durchzuführe.

```{r}
#| echo: true

v_1[v_1 < 3 | v_1 > 4]
v_1[v_1 >= 3 & v_1 <= 4]
```

Die Vergleiche können wir nun verwenden um bedingte Anweisungen zu verstehen.

## Bedingte Anweisungen und Verzweigungen 

In @fig-r-flow-ifelse ist der Grundgerüst einer bedingten Anweisungen bzw. Verzweigung im Code dargestellt.

```{mermaid}
%%| label: fig-r-flow-ifelse
%%| fig-cap: "Bedingte Anweisungen."

flowchart
A[condition] --> B[TRUE]
A[condition] --> C[FALSE]
B --> D[Ausdruck A]
C --> E[Ausdruck B]
```

Wir haben einen Ausdruck `condition` der entweder `WAHR` oder `FALSCH` sein kann, und entsprechend wird entweder `Ausdruck A` oder `Ausdruck B` ausgeführt. In `condition` wird überlicherweise in irgendeiner Form ein Vergleich vorgenommen.

Syntaktisch wird die Bedingte Anweisung in `R` folgendermaßen spezifiziert.

```{r}
#| eval: false
#| echo: true

if (condition) { # <1>
  AusdruckA      # <2>
} else {         # 
  AusdruckB      # <3> 
}

```

1. Zunächst kommt das Schlüsselwort `if` gefolgt von einer Klammer mit dem Ausdruck `condition` der zu einem logischen Wert (`true,false`) evaluiert wird.
2. Wenn `condition` `TRUE` ist, wird der `AusdruckA` innerhalb der geschweiften Klammern ausgeführt.
3. Wenn `condition` `FALSE` ist, wird der `else` Zweig, bzw. der `AusdruckB` zwischen den geschweiften Klammern nach `else` ausgeführt.

Schauen wir uns ein einfaches Beispiel an:

```{r}
#| echo: true

m <- 0
a <- 10
b <- 20
if (a < b) {
  m <- 10
} else {
  m <- 20
}
m
```

Was passiert hier, der Wert von `m` wird unterschiedlich belegt, je nachdem welche Werte `a` und `b` haben. Mit diesem `ifelse`-Konstrukt können wir daher unterschiedliche Anweisungen in unseren Programmen ausführen lassen, in Abhängigkeit von bestimmten Bedingungen. Wir könnten zum Beispiel unsere eigene Absolutfunktion schreiben.

```{r}
#| echo: true

my_abs <- function(x) {
  if (x < 0) {
    -x
  } else {
    x
  }
}
my_abs(3)
my_abs(0)
my_abs(-3)
```

## `for`-Schleifen

Als letztes Programmierkonstrukt kommen jetzt noch Schleifen. Schleifen sind eine der Paradedisziplin von Computern, ein Schleife ermöglicht es Anweisungen wiederholt auszuführen. Wenn zum Beispiel eine Liste oder ein Vektor für jedes Element durchlaufen werden soll und immer wiederkehrende Anweisungen ausgeführt werden sollen.

Die Syntax um eine Schleife in `R`.

```{r}
#| eval: false
#| echo: true

for (variable in sequenz) { # <1>
  Ausdruck             # <2>
}

```

1. Als erstes kommt das Schlüsselwort `for` gefolgt von einer Klammer. In der Klammer werden zwei Ausdrücke benötigt. Eine Variable die hier `variable` heißt, die als Schleifenzähler fungiert. Der Schleifenzähler durchläuft die Einträge der Variablen `sequenz` einen nach dem anderen. In den meisten Fällen handelt es sich hier um einen Vektor.
2. Jedes Mal wenn `variable` mit einem neuen Wert belegt worden ist, wird `Ausdruck` zwischen den geschweiften Klammer `{}` ausgeführt. Der jeweilige aktuelle Wert von `variable` steht im Ausdruck zur Verfügung. Der Code zwischen den geschweiften Klammern wird als **Schleifenblock** bezeichnet.

Hört sich komplizierter an als es ist. Ein einfaches Beispiel:

```{r}
#| echo: true

for (i in 1:5) {
  print(i)
}
```

In dem Beispiel durchläuft der Schleifenzähler `i` die Werte von $1$ bis $5$. Für den Schleifenzähler hat es sich in der Informatik eingebürgert wenn möglich die Bezeichner `i`, `j` oder `k` zu verwenden ähnlich wie für Indexvariablen in der Mathematik. Der Vektor hätte auch in Form einer Variablen vorliegen können.

```{r}
#| echo: true

s <- 1:5
for (i in s) {
  print(i)
}
```

Schauen wir uns das Beispiel noch etwas kleinteiliger an. In dem nächsten Problem wird die `cat()`-Funktion verwendet um Werte auf der Kommandozeile auszugeben. Das Zeichen `\n` ist lediglich ein Sonderzeichen für neue Zeile damit die Ausgaben untereinander und nicht nebeneinander stehen.

```{r}
#| echo: true

for (i in 1:5) {
  cat('Schleifenkörper wird ausgeführt\n')
  cat('Schleifenzähler i =', i, '\n')
}
```

Was passiert in dem Code. Wir haben einen Vektor mit den Elementen von $1,2,\ldots ,5$. Der Schleifenzähler hat den Bezeichner `i`. `i` wird Element für Element mit den Einträgen aus dem Vektor belegt und jedes mal wird der Ausdruck zwischen den Klammern ausgeführt.

Ein weitere Beispiel könnte den Vektor als Index für die Einträge in einen anderen Vektor mit Elementen verwenden. Sei ein Vektor mit den Zeichenketten `"mama"`, `"papa"`, `"daughter"` und `"son"` gegeben und diese Werte sollen der Reihe nach ausgegeben werden. D.h. es soll durch die Werte **iteriert** werden. Dies könnte zu folgenden Programm führen.

```{r}
#| echo: true

vec <- c('mama','papa','daughter','son') 
for (i in 1:4) {
  cat('Ausdruck wird ausgeführt\n')
  cat('i =', i, ': ', vec[i], '\n')
}
```

Da der Vektor `vec` eben auch ein Vektor ist, nur eben mit Zeichenketten könnten wir aber auch direkt:

```{r}
#| echo: true

for (i in vec) {
  cat('Ausdruck wird ausgeführt\n')
  cat('i =', i, '\n')
}
```

Tatsächlich ist die Anwendung der `for`-Schleifen seltener als in anderen Programmiersprachen, da für viele Anweisungen **vektorisierte Funktionen** zur Verfügung stehen. D.h. soll ein Vektor von Werten bearbeitet werden, dann arbeitet eine vektorisierte Funktionen alle Elemente gleichzeitig statt und ist dabei meistens noch schneller. Im Hintergrund kann dann zwar immer noch eine `for`-Schleife zur Anwendung kommen, dies ist jedoch für die Benutzerin transparent. Ein Beispiel könnte ein Vektor mit Zeichenketten sein von denen nur immer der letzte Buchstabe benötigt wird.

```{r}
#| echo: true

vec <- c("P1","P2","P3")
vec
```

Dies könnte wieder mit einer `for`-Schleife und der `substr()`-Funktion erreicht werden.

```{r}
#| echo: true

for (s in vec) {
  print(substr(s, 2, 3))
}
```

Die `substr()`-Funktion ist aber vektorisiert und kann schon direkt auf Zeichenkettenvektoren arbeiten. Daher wird mit der folgenden Anweisung das gleiche Ergebnis erreicht.

```{r}
#| echo: true

substr(vec, 1, 3)
```

Diese Lösung hat auch noch den Vorteil, das das Ergebnis direkt als Vektor vorliegt.

::: {.callout-tip}
Bevor größere Programme mit `for`-Schleifen erstellt werden ist es meistens sinnvoll zunächst nach vektorisierten Lösungen zu schauen, da diese meistens schneller läuft und zu deutlich einfacher zu verstehenden Programme führt.
:::

Insgesamt ist eine `for`-Schleife ein Programmierkonstrukt das immer wieder auftritt und daher bekannt sein sollte.

### Ein längeres Beispiel mit `for`

Zur Vertiefung schauen wir uns ein längeres Beispiel für eine `for`-Schleifen.

Problemstellung: Wir wollen eine Abschätzung darüber welche Unterschiede zwischen zwei Gruppen zu erwarten sind bei unterschiedlichen Treatments. Die Gruppen haben beide eine Größe von $n_1 = n_2 = n = 20$. Aus der Literatur wissen wir, dass die Gruppe unter Treatment 1 einen Mittelwert von $\mu_1 = 10$ während unter Treatment 2 im Mittel ein Mittelwert von $\mu_2 = 15$ zu erwarten sind. Das Beispiel ist abstrakt aber die Mittelwert könnten zum Beispiel Weiten beim Medizinball repräsentieren. Wir wollen jetzt abschätzen welche Unterschied wir zwischen den Gruppen erwarten würden wenn beide Gruppen eine Standardabweichung von $\sigma = 2$ aufweisen. D.h. wir definieren uns erst mal die Randwerte unserer Simulation.

```{r}
#| echo: true

n <- 20
mu_1 <- 10
mu_2 <- 15
sigma <- 2
```

Die Werte in den Gruppen folgen einer Normalverteilung. In `R` können wir Zufallsstichproben der Größe $n$ aus einer Normalverteilung mit Mittelwert $\mu$ und Standardabweichung $\sigma$ mittels der Funktion `rnorm(n, mu, sigma)` erzeugen. D.h. ein Durchgang der Simulation würde wie folgt aussehen.

```{r}
#| echo: true

stichprobe_1 <- rnorm(n, mu_1, sigma)
stichprobe_2 <- rnorm(n, mu_2, sigma)
delta <- mean(stichprobe_1) - mean(stichprobe_2)
delta
```

Nun, wollen wir diese Simulation nicht nur einmal sondern ganz oft, z.B. $n_sim = 1000$ wiederholen um eine realistische Abschätzung über die zu erwartenden Werte zu bekommen. Dafür setzen wir eine `for`-Schleife ein. 

```{r}
#| echo: true

n_sim <- 1000
for (i in 1:n_sim) {
  stichprobe_1 <- rnorm(n, mu_1, sigma)
  stichprobe_2 <- rnorm(n, mu_2, sigma)
  delta <- mean(stichprobe_1) - mean(stichprobe_2) 
}
```

Jetzt ergibt sich das Problem, dass wir noch einen Platz brauchen um die jeweiligen Ergebnisse abzuspeichern. Dafür wird ein Vektor erstellt der ausreichend bzw. genau so vielen Einträgen wie abzuspeichernde Werte hat. Mit der Funktion `numeric(n)` können wir einen numerischen Vektor der Länge `n` erstellen, der nur $0$ als Einträge hat. Kombiniert mit unserem Programm ergibt sich:

```{r}
#| echo: true

n_sim <- 1000
delta_s <- numeric(n_sim)
for (i in 1:n_sim) {
  stichprobe_1 <- rnorm(n, mu_1, sigma)
  stichprobe_2 <- rnorm(n, mu_2, sigma)
  delta_s[i] <- mean(stichprobe_1) - mean(stichprobe_2) 
}
```

Jetzt sind alle Zwischenergebnisse in dem Vektor `delta_s` gespeichert und wir können uns die Verteilung der Unterschiede z.B. mit Hilfe eines Histogramm anschauen.

```{r}
#| echo: true

hist(delta_s)
```

Wenig überraschend sind Unterschiede in den Mittelwerten um $-5$ Einheiten auseinander, aber es treten auch Unterschiede von $-7$ und $-3$ auf.

## Wiederholungen mit `replicate()`

Eine weitere Möglichkeit `R` eine Gruppe von Anweisungen wiederholt durchführen zu lassen, kann mittels der Funktion `replicate()` erreicht werden. In den meisten Fällen wird `replicate()` verwendet um eine Simulation durchzuführen. D.h. das Beispiel von eben könnte ebenfalls mittels `replicate()` programmiert werden. `replicate()` hat zwei Hauptargumente. Das erste `n` bestimmt die Anzahl der Wiederholungen während das zweite Argument eine Anweisung, in den meisten Fällen eine Funktion ist.

Nehmen wir als Anwendungsfall, dass wir wiederholt Mittelwerte $\bar{x}$ aus einer Zufallsstichprobe erzeugen wollen. Wir ziehen beispielsweise eine Stichprobe von $n = 20$ Werten aus einer Normalverteilung mit den Parametern $\mu = 3, \sigma = .7$. Und wir wollen uns die Stichprobenverteilung der Mittelwerte ansehen. Wir beginnen mit einem einfach proof-of-concept.

```{r}
#| echo: true
mu <- 3
sigma <- 0.7
n <- 20

x_bar <- mean(rnorm(n, mu, sigma))
cat('Der beobachtete Mittelwert ist: ', x_bar, '\n')
```

Sollen die Anweisung nun nicht nur einmal sondern wie im vorherigen Beispiel  für die `for`-Schleife $1000$mal durchgeführt werden, dann müssen die Anweisungen in Form einer eigenen Funktion gebündelt werden (Die Syntax für die Definition einer Funktion ist wahrscheinlich etwas undurchsichtig und wird erst im nächsten Kapitel genauer erklärt). 

```{r}
#| echo: true

x_bar_func <- function(n = 20, mu = 3, sigma = 0.7) {
  mean(rnorm(n, mu, sigma))
}
```

Mit dieser Anweisung wird eine neue Funktion `x_bar_func()` definiert. Diese Funktion kann nun wie jede andere Fuktion in `R` aufgerufen werden. Wenn `x_bar_func()` ausgeführt wird, erhalten wir wie oben einen zufälligen Mittelwert aus einer Stichrprobe der Größe $n = `r n`$ aus der Normalverteilung $\mathcal{N}(`r mu`, `r sigma`)$.

```{r}
#| echo: true

x_bar_func()
```

Die Funktion `x_bar_func()` kann nun an `replicate()` als zweites Argument übergeben werden, während mit dem ersten Argument der Anzahl der Wiederholungen spezifiziert wird. Starten wir erst mal nur mit $N_{sim} = 5$ Wiederholungen, um den Überblick zu behalten. 

```{r}
#| echo: true

N_sim <- 5
replicate(N_sim, x_bar_func())
```

Als Rückgabewert von `x_bar_func()` erhalten wir einen Vektor dessen Elemente die einzelnen Rückgabewerten der Aufrufe von `x_bar_func()` sind. Dieser Vektor mit den Rückgabewert kann nun ganz normal an eine Variable zugewiesen werden. Mittels der Variable kann dann zum Beispiel ein Histogramm der Mittelwerte erzeugt werden.

```{r}
#| echo: true
#| label: fig-flow-replicate

N_sim <- 100
x_bar_s <- replicate(N_sim, x_bar_func())
hist(x_bar_s)
```

In @fig-flow-replicate ist zu erkennen, dass der Großteil der Mittelwerte um den Wert $3$ schwankt, was auch den Erwartungen entspricht, da wir Stichproben aus einer Normalverteilung mit dem Mittelwert $\mu = 3$ ziehen.

Zusammenfassend lässt sich daher zur Verwendung von `replicate()` sagen, dass zunächst eine Funktion mit den benötigten Anweisungen definiert werden muss und diese dann an `replicate()` übergeben wird. Der Vollständigkeit halber eine Ausführung mit einer `for`-Schleife.

```{r}
#| echo: true

x_bar_s2 <- numeric(N_sim)
for (i in 1:N_sim) {
  x_bar_s2[i] <- x_bar_func()
}
hist(x_bar_s2)
```

Dass Programm ist zwar nicht viel länger, es muss sich aber expliziter die Zuweisung der Ergebnisse gekümmert werden. Dies findet bei `replicate()` automatisch statt.

::: {.callout-tip}
Wenn wiederholte Anweisungen durchgeführt werden sollen und die Schleifenvariable nicht explizit benötigt wird, dann bietet `replicate()` eine gute Alternative zu `for`-Schleifen.
:::

# Einführung 

```{r}
#| echo: false
#| warning: false
#| message: false
source('_common.R')
```

## Back to school

Wir beginnen mit ein Konzept das wir schon alle kennen. Nämlich die Punkt-Steigungsform aus der Schule (siehe @eq-slm-psform-1).

$$
y = m x + b
$${#eq-slm-psform-1}

Wir haben eine abhängige Variable $y$ und eine lineare Formel $mx + b$ die den funktionalen Zusammenhang zwischen den Variablen $y$ und $x$ beschreibt. Um das Ganze einmal konkret zu machen setzen wir $m = 2$ und $b = 3$ fest. Die Formel @eq-slm-psform-1 wird dann zu:

```{r}
m <- 2
b <- 3
```

$$
y = `r m` x + `r b`
$${#eq-slm-psform-2}

Um ein paar Werte für $y$ zu erhalten setzen wir jetzt verschiedene Wert für $x$ ein indem wir $x$ in Einserschritten zwischen $[0, \ldots, 5]$ erhöhen. Um die Werte darzustellen verwenden wir zunächst eine Tabelle (vlg. @tbl-slm-psform)

```{r}
#| tbl-cap: "Tabelle der Daten"
#| label: tbl-slm-psform

tib_psf <- tibble(x = 0:5, y = m * x + b)
kable(tib_psf,
      booktabs = T,
      linesep = '')

```

Wenig überraschend nimmt $y$ für den Wert $x = 0$ den Wert $`r b`$ an und z.B. für den Wert $x = 3$ nimmt $y$ den Wert $`r m` \cdot 3 + `r b` = `r m*3+b`$ an. 

Eine andere Darstellungsform ist naturlich eine graphische Darstellung in dem wir die Werte von $y$ gegen $x$ auf einem Graphen abtragen (siehe @fig-slm-psform-1).

```{r}
#| fig.cap: "Graphische Darstellung der Daten aus @tbl-slm-psform"
#| label: fig-slm-psform-1

ggplot(tib_psf, aes(x,y)) +
  geom_line() + 
  geom_point(size=4)

```

Wiederum wenig überraschen sehen wir einen linearen Zuwachs der $y$-Wert mit den größerwerdenden $x$-Werte. Da in der Definition der Formel @eq-slm-psform-2 nirgends festgelegt wurde, dass diese nur für ganzzahlige $x$-Werte gilt, haben wir direkt eine Gerade durch die Punkte gelegt. Hier wird auch die Bedeutung von $m$ und $b$ direkt klar. Die Variable $m$ bestimmt die Steigung der Gleichung während $b$ den y-Achsenabschnitt beschreibt. 

::: {#def-slm-basics-y-intercept}
## $y$-Achsenabschnitt

Der y-Achsenabschnitt ist der Wert den $y$ einnimmt wenn $x$ den Wert $0$ annimmt. Sei $y$ durch eine lineare Gleichung $y = mx + b$ definiert, dann wird der y-Achsenabschnitt durch den Wert $b$ bestimmt.

:::

Die Variable $m$ dahingehend bestimmt die Steigung der Gerade. 

::: {#def-slm-basics-slope}

Wenn $y$ durch eine lineare Gleichung $y = mx + b$ definiert ist, dann bestimmt die Variable $m$ die Steiung der dazugehörenden Gerade. D.h. wenn sich die Variable $x$ um einen Einheit vergrößert (verkleinert) wird der Wert von $y$ um $m$ Einheiten größer (kleiner). Gilt $m < 0$ dann umgekehrt.

:::

Diese beiden trivialen Konzepte mit eigenen Definitionen zu versehen erscheint im ersten Moment vielleicht etwas übertrieben. Wie sich allerdings später zeigen wird, sind diese beiden Einsichten immer wieder zentral wenn es um die Interpretation von linearen statistischen Modellen geht.

Soweit so gut. Führen wir direkt ein paar Symbole ein, die uns später noch behilflich sein werden. Sei jetzt die Menge der $x$-Werte geben $x = [0, 1, 2, 3, 4, 5]$. Strenggenommen handelt es sich wieder um ein Tupel, da wir jetzt die Reihenfolge nicht mehr ändern. Wir führen nun einen Index $i$ ein, um einzelne Werte in dem Tupel über ihre Position zu bestimmen und wir hängen diesen Index $i$ an $x$ an. Dann wird aus $x$, $x_i$.

```{r}
#| tbl-cap: "$x$-Werte und ihr Index $i$"
#| label: tbl-slm-basic-index

kable(tibble(i = 1:6, x = 0:5),
      booktabs = T,
      linesep = '',
      col.names = c('Index $i$', '$x$-Wert'))
```

Damit können wir jetzt einen speziellen Wert zum Beispiel den dritten Wert mit $x_3 = 2$ bestimmen. Wenden wir unseren Index auf unsere @eq-slm-psform-1 an, folgt daraus, dass $y$ jetzt auch einen Index $i$ erhält.

$$
y_i = m x_i + b \qquad i \text{ in } [1,2,3,4,5,6]
$$

Wir bezeichnen die beiden Variablen $m$, die Steigung, und $b$, den y-Achsenabschnitt, jetzt auch mit neuen Variablen die auch noch einen Index erhalten. Aus $m$ wird $\beta_1$ und aus $b$ wird $\beta_0$. Damit wird der y-Achsenabschnitt mit $\beta_0$ bezeichnet und die Steigung wird mit $\beta_1$ bezeichnet. Dann wir aus unserer Gleichung:

$$
y_i = \beta_0 + \beta_1 x_i
$$

Das ist immer noch unsere einfache Punkt-Steigungsform, wir haben lediglich den Index $i$ eingeführt um unterschiedliche $y-x$-Wertepaare zu bezeichnen und wir haben den $y$-Achsenabschnitt und die Steigung mit neuen Symbolen versehen.

```{r defs_reg_01}
jump <- readr::read_delim('data/running_jump.csv',
                          delim=';',
                          col_types = 'dd')
mod_jump <- lm(jump_m ~ v_ms, jump)
jump <- jump |> mutate(y_hat = predict(mod_jump))
```

## Einfaches Beispiel - Daten

```{r}
jump |> select(jump_m, v_ms) |>
  head(n = 7) |>  
  kable(booktabs=TRUE,
               linesep="",
               caption="Ausschnitt der Sprungdaten",
               digits = 2)
```

## Einfaches Beispiel - Grafik

```{r}
#| fig.cap="Zusammenhang der Anlaufgeschwindigkeit und der Sprungweite",
#| fig.height=2

ggplot(jump, aes(v_ms, jump_m)) + geom_point() + 
  labs(x = 'Anlaufgeschwindigkeit[m/s]',
       y = 'Sprungweite[m]') 
```

## Einfaches Beispiel - Regressionsgerade

```{r}
#| fig.cap="Zusammenhang der Anlaufgeschwindigkeit und der Sprungweite",
#| fig.height=2

beta_0 <- coef(mod_jump)[1]
beta_1 <- coef(mod_jump)[2]
ggplot(jump, aes(v_ms, jump_m)) + 
  labs(x = 'Anlaufgeschwindigkeit[m/s]',
       y = 'Sprungweite[m]') +
  geom_abline(slope = beta_1, intercept = beta_0,
              col = 'blue')  +
  geom_abline(data = tibble(s = beta_1 + seq(-0.05, 0.05, 0.01),
                            y_in = beta_0),
              aes(slope = s, intercept = y_in), alpha=.1, col='blue') +
  geom_segment(aes(x = v_ms, xend = v_ms, yend = jump_m, y = y_hat),
               col = 'red') +
  geom_point() 
```

## Loss function

$$
\sum_{i=1}^n(y_i - (\beta_0 + \beta_1 v_i))^2
$$

$$
y = -0.14 + 0.76 \times v
$$



## Regression in `R`

### Model fitten mit `lm()`
```{r, echo=T}
mod <- lm(jump_m ~ v_ms, data = jump)
mod
```

## Formelsyntax in `lm(y ~ x, data)`


Table: Formelsyntaxbeispiele für `lm()`

| Modell | Formel |  Erklärung |
|---|---|---|
| $y=\beta_0$ | `y ~ 1` | y-Ab
| $y=\beta_0+\beta x$ | `y ~ x` | y-Ab und StKoef |
| $y=\beta_0+\beta_1x_1+\beta_2x_2$ | `y ~ x1 + x2` | y-Ab und 2 StKoe |

y-Ab = y-Achsenabshnitt, StKoef = Steigungskoeffizient

## `lm()`-fit mit `summary()` inspizieren

```{r, echo=T}
summary(mod)
```

## `lm()` und ein paar friends...

Koeffizienten und Standardschätzfehler
```{r, echo=T}
coef(mod)
sigma(mod)
```

Residuen
```{r, echo=T}
# Nur die ersten beiden
# Residuen
# damit der Ausdruck
# auf das Slide passt.
resid(mod)[1:2]
```

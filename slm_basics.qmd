# Einführung 

```{r}
#| echo: false
#| warning: false
#| message: false
source('_common.R')
```

## Back to school

Wir beginnen mit ein Konzept das wir schon alle kennen. Nämlich der Punkt-Steigungsform aus der Schule (siehe @eq-slm-psform-1).

$$
y = m x + b
$${#eq-slm-psform-1}

Wir haben eine abhängige Variable $y$ und eine lineare Formel $mx + b$ die den funktionalen Zusammenhang zwischen den Variablen $y$ und $x$ beschreibt. Um das Ganze einmal konkret zu machen setzen wir $m = 2$ und $b = 3$ fest. Die Formel @eq-slm-psform-1 wird dann zu:

```{r}
m <- 2
b <- 3
```

$$
y = `r m` x + `r b`
$${#eq-slm-psform-2}

Um ein paar Werte für $y$ zu erhalten setzen wir jetzt verschiedene Wert für $x$ ein indem wir $x$ in Einserschritten zwischen $[0, \ldots, 5]$ erhöhen. Um die Werte darzustellen verwenden wir zunächst eine Tabelle (vlg. @tbl-slm-psform)

```{r}
#| tbl-cap: "Tabelle der Daten"
#| label: tbl-slm-psform

tib_psf <- tibble(x = 0:5, y = m * x + b)
kable(tib_psf,
      booktabs = T,
      linesep = '')

```

Wenig überraschend nimmt $y$ für den Wert $x = 0$ den Wert $`r b`$ an und z.B. für den Wert $x = 3$ nimmt $y$ den Wert $`r m` \cdot 3 + `r b` = `r m*3+b`$ an. 

Eine andere Darstellungsform ist naturlich eine graphische Darstellung in dem wir die Werte von $y$ gegen $x$ auf einem Graphen abtragen (siehe @fig-slm-psform-1).

```{r}
#| fig.cap: "Graphische Darstellung der Daten aus @tbl-slm-psform"
#| label: fig-slm-psform-1

ggplot(tib_psf, aes(x,y)) +
  geom_line() + 
  geom_point(size=4)

```

Wiederum wenig überraschen sehen wir einen linearen Zuwachs der $y$-Wert mit den größerwerdenden $x$-Werte. Da in der Definition der Formel @eq-slm-psform-2 nirgends festgelegt wurde, dass diese nur für ganzzahlige $x$-Werte gilt, haben wir direkt eine Gerade durch die Punkte gelegt. Hier wird auch die Bedeutung von $m$ und $b$ direkt klar. Die Variable $m$ bestimmt die Steigung der Gleichung während $b$ den y-Achsenabschnitt beschreibt. 

::: {#def-slm-basics-y-intercept}
## $y$-Achsenabschnitt

Der y-Achsenabschnitt ist der Wert den $y$ einnimmt wenn $x$ den Wert $0$ annimmt. Sei $y$ durch eine lineare Gleichung $y = mx + b$ definiert, dann wird der y-Achsenabschnitt durch den Wert $b$ bestimmt.

:::

Die Variable $m$ dahingehend bestimmt die Steigung der Gerade. 

::: {#def-slm-basics-slope}

Wenn $y$ durch eine lineare Gleichung $y = mx + b$ definiert ist, dann bestimmt die Variable $m$ die Steiung der dazugehörenden Gerade. D.h. wenn sich die Variable $x$ um einen Einheit vergrößert (verkleinert) wird der Wert von $y$ um $m$ Einheiten größer (kleiner). Gilt $m < 0$ dann umgekehrt.

:::

Diese beiden trivialen Konzepte mit eigenen Definitionen zu versehen erscheint im ersten Moment vielleicht etwas übertrieben. Wie sich allerdings später zeigen wird, sind diese beiden Einsichten immer wieder zentral wenn es um die Interpretation von linearen statistischen Modellen geht.

Soweit so gut. Führen wir direkt ein paar Symbole ein, die uns später noch behilflich sein werden. Sei jetzt die Menge der $x$-Werte geben $x = [0, 1, 2, 3, 4, 5]$. Strenggenommen handelt es sich wieder um ein Tupel, da wir jetzt die Reihenfolge nicht mehr ändern. Wir führen nun einen Index $i$ ein, um einzelne Werte in dem Tupel über ihre Position zu bestimmen und wir hängen diesen Index $i$ an $x$ an. Dann wird aus $x$, $x_i$.

```{r}
#| tbl-cap: "$x$-Werte und ihr Index $i$"
#| label: tbl-slm-basic-index

kable(tibble(i = 1:6, x = 0:5),
      booktabs = T,
      linesep = '',
      col.names = c('Index $i$', '$x$-Wert'))
```

Damit können wir jetzt einen speziellen Wert zum Beispiel den dritten Wert mit $x_3 = 2$ bestimmen. Wenden wir unseren Index auf unsere @eq-slm-psform-1 an, folgt daraus, dass $y$ jetzt auch einen Index $i$ erhält.

$$
y_i = m x_i + b \qquad i \text{ in } [1,2,3,4,5,6]
$$

Wir bezeichnen die beiden Variablen $m$, die Steigung, und $b$, den y-Achsenabschnitt, jetzt auch mit neuen Variablen die auch noch einen Index erhalten. Aus $m$ wird $\beta_1$ und aus $b$ wird $\beta_0$. Damit wird der y-Achsenabschnitt mit $\beta_0$ bezeichnet und die Steigung wird mit $\beta_1$ bezeichnet. Dann wir aus unserer Gleichung:

$$
y_i = \beta_0 + \beta_1 x_i
$$ {#eq-slm-psform-beta}

Das ist immer noch unsere einfache Punkt-Steigungsform, wir haben lediglich den Index $i$ eingeführt um unterschiedliche $y-x$-Wertepaare zu bezeichnen und wir haben den $y$-Achsenabschnitt und die Steigung mit neuen Symbolen versehen.

Bei dem bisherigen Zusammenhang handelt es sich um einen funktionalen Zusammenhang\index{Funktionaler Zusammenhang} zwischen den beiden Variablen $x$ und $y$. Funktional deswegen, weil wir eine definiertes mathematisches Modell angeben können, d.h. wir haben eine mathematische Funktion welche die Beziehung zwischen den beiden Variablen beschreibt. Wenn wir den Wert für $x$ kenne, dann können wir den präzisen Wert für $y$ ausreichen, indem wir ihn in @eq-slm-psform-1 einsetzen. Aus der Schule kennen wir auch noch die Darstellung $y = f(x)$. Streng genommen ist diese Darstellung für @eq-slm-psform-1 nicht ausreichend, denn um den Wert für $y$ auszurechnen benötigen wir auch noch Kenntnis über die Werte $m$ und $b$, bzw. in unsere weiteren Darstellung $\beta_0$ und $\beta_1$. Daher sollte der Zusammenhang eigentlich mit $y = f(x, \beta_0, \beta_1)$ bezeichnet werden. Es gilt aber immernoch, für gegebene $x, \beta_0$ und $\beta_1$ ist der Wert für $y$ fest determiniert.

Wenn wir mit realen Daten arbeiten, dann funktioniert dieser Ansatz leider nicht ganz. Selbst wenn wir ein Experiment gleich durchführen werden wir immer etwas unterschiedliche Werte im Sinne der Messungenauigkeit messen. Wenn wir biologische Systeme messen, kommt dazu das diese in den seltensten Fällen zeitstabil sind sondern immer bestimmte Veränderungen von einem Zeitpunkt zum nächsten auftauchen. In @fig-slm-basics-jump-1 sind Sprungweiten von mehreren Weitspringerinnen gegen die Anlaufgeschwindigkeit abgetragen. Bei der Betrachtung der Daten erscheint ein linearer Zusammenhang zwischen diesen beiden Variablen durchaus als plausibel. 

```{r defs_reg_01}
jump <- readr::read_delim('data/running_jump.csv',
                          delim=';',
                          col_types = 'dd')  
jump <- jump |> add_column(i = 1:dim(jump)[1], .before=1)
mod_jump <- lm(jump_m ~ v_ms, jump)
jump <- jump |> mutate(y_hat = predict(mod_jump))
```

```{r}
#| fig.cap: "Zusammenhang der Anlaufgeschwindigkeit und der Sprungweite beim Weitsprung"
#| label: fig-slm-basics-jump-1 
#| fig.height: 4

id_mark <- which(jump$v_ms > 9 & jump$v_ms < 9.1)[-2]
ggplot(jump, aes(v_ms, jump_m)) +
  geom_point(data = jump[id_mark,], color = 'red', size = 3) +
  geom_point(size=2) + 
  labs(x = 'Anlaufgeschwindigkeit[m/s]',
       y = 'Sprungweite[m]') 
```

In @fig-slm-basics-jump-1 sind zwei Punkte rot markiert. Die beiden Werte haben praktisch die gleichen $x$-Werte allerdings unterscheiden sich die $y$-Werte deutlich von einander. Und dies sind nicht die einzigen Beispielpaare bei denen die $x$-Werte nahe beiandern liegen, während die $y$-Werte deutlich weiter voneiander entfernt liegen als bei einen funktionalen Zusammenhang nach @eq-slm-psform-1 zu erwarten wäre. Diese Abweichungen kommen durch zufällige Einflussfaktoren wie eben zum Beispiel die Veränderungen angesprochener biologischer Faktoren, Messunsicherheiten, beim Weitsprung draußen sind auch immer externe Einflüsse mögliche, vielleicht wenn es sich um den gleichen Springer handelt, hat er auch beim zweiten Mal keine Lust mehr gehabt. Wenn die Punkte zwei unterschiedliche Springer sind, dann kommt auch dazu, dass zwei Weitspringer bei identischer Anlaufgeschwindigkeit unterschiedliche Sprungfähigkeiten haben oder auch technisch nicht gleich gesprungen sind und so weiter und so fort. Insgesamt führen alle diese Einflüsse dazu, dass wir nicht mehr einen streng funktionalen Zusammenhang zwischen unseren beiden Variablen $x$ der Anlaufgeschwindigkeit und $y$ der Sprungweite vorfinden. Wie wir mit diesen Einflüssen umgehen ist das zentrale Thema des nächsten Abschnitts und markiert auch unseren Eingang zur einfachen linearen Regression.

## Die einfache lineare Regression

Bleiben wir bei unserem Beispiel aus @fig-slm-basics-jump-1 und interpretieren das als praktisches Problem. Wir sind eine Weitsprungtrainerin und stehen jetzt vor der Aufgabe in unserem Training etwas zu verändern um die Weitsprungleistung zu verbessern. Wir haben wir haben uns dazu entschlossen am Anlauf etwas zu verbessern wissen jetzt aber nicht ob, das wirklich lohnenswert ist. Von einer befreundeten Trainerin haben wir einen Datensatz bekommen von Anlaufgeschwindigkeiten und den dazugehörigen Sprungweiten. Schauen wir uns zunächst die einmal die Struktur der Daten an.

```{r}
#| label: tbl-slm-basics-jump-1
#| tbl-cap: "Ausschnitt der Sprungdaten"

jump |> select(jump_m, v_ms) |>
  head(n = 7) |>  
  kable(booktabs=TRUE,
               linesep="",
               digits = 2)
```

In @tbl-slm-basics-jump-1 ist ein Ausschnitt Sprungdaten abgebildet. Wir haben eine einfache Struktur der Daten. Wir haben eine Tabelle mit zwei Spalten. `jump_m` bezeichnet die Sprungweiten und `v_ms` die Anlaufgeschwindigkeiten. Damit wir die Datenpaare voneinander unterscheiden bzw. identifzieren können führen wir unseren bereits besprochenen Index $i$ und können so einzelne Paare ansprechen.

```{r}
#| label: tbl-slm-basics-jump-2
#| tbl-cap: "Ausschnitt der Sprungdaten"
jump |> select(i, jump_m, v_ms) |>
  head(n = 7) |>  
  kable(booktabs=TRUE,
               linesep="",
               digits = 2)
```

Das waren bisher aber nur Formalitäten. Wir wollen jetzt denn Zusammenhang zwischen den beiden Variablen modellieren. Wir könnten wahrscheinlich auch einfach Pi-mal-Daumen abschätzen wie groß der Zusammenhang ist. Wenn wir jetzt aber einen unserer Läufer haben, der z.B. etwa $9m/s$ anläuft, welchen Vergleichswerte nehmen wir dann aus @fig-slm-basics-jump-1. Den unteren oder den oberen der beiden roten Werte? Oder vielleicht den Mittelwert? Welchen Wert nehmen wir wenn unserer Athlete $9.7m/s$ anläuft. Da haben wir leider keinen Vergleichswert in unserer Tabelle. Daher wäre es schon ganz praktisch eine Formel nach dem Muster von @eq-slm-psform-beta zu haben. Wie wir allerdings schon festgestellt haben, geht dies nicht so einfach da wir eben das Problem mit den Einflussfaktoren haben, die dazu führen, dass die Werte eben nicht streng auf eine Gerade liegen.


```{r}
#| fig.cap: "Zusammenhang der Anlaufgeschwindigkeit und der Sprungweite"
#| fig.height: 2

beta_0 <- coef(mod_jump)[1]
beta_1 <- coef(mod_jump)[2]
ggplot(jump, aes(v_ms, jump_m)) + 
  labs(x = 'Anlaufgeschwindigkeit[m/s]',
       y = 'Sprungweite[m]') +
  geom_abline(slope = beta_1, intercept = beta_0,
              col = 'blue')  +
  geom_abline(data = tibble(s = beta_1 + seq(-0.05, 0.05, 0.01),
                            y_in = beta_0),
              aes(slope = s, intercept = y_in), alpha=.1, col='blue') +
  geom_segment(aes(x = v_ms, xend = v_ms, yend = jump_m, y = y_hat),
               col = 'red') +
  geom_point() 
```

## Loss function

$$
\sum_{i=1}^n(y_i - (\beta_0 + \beta_1 v_i))^2
$$

$$
y = -0.14 + 0.76 \times v
$$



## Regression in `R`

### Model fitten mit `lm()`
```{r, echo=T}
mod <- lm(jump_m ~ v_ms, data = jump)
mod
```

## Formelsyntax in `lm(y ~ x, data)`


Table: Formelsyntaxbeispiele für `lm()`

| Modell | Formel |  Erklärung |
|---|---|---|
| $y=\beta_0$ | `y ~ 1` | y-Ab
| $y=\beta_0+\beta x$ | `y ~ x` | y-Ab und StKoef |
| $y=\beta_0+\beta_1x_1+\beta_2x_2$ | `y ~ x1 + x2` | y-Ab und 2 StKoe |

y-Ab = y-Achsenabshnitt, StKoef = Steigungskoeffizient

## `lm()`-fit mit `summary()` inspizieren

```{r, echo=T}
summary(mod)
```

## `lm()` und ein paar friends...

Koeffizienten und Standardschätzfehler
```{r, echo=T}
coef(mod)
sigma(mod)
```

Residuen
```{r, echo=T}
# Nur die ersten beiden
# Residuen
# damit der Ausdruck
# auf das Slide passt.
resid(mod)[1:2]
```

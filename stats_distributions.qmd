# Verteilungen 

```{r}
#| echo: false
#| warning: false
#| message: false
source('_common.R')
```


Im Folgenden werden vier verschiedene Verteilungen noch einmal etwas genauer vorgestellt, da diese Verteilung immer wieder im weiteren Verlauf auftauchen werden. Dies sind die Normalverteilung, die $t$-Verteilung, die $\chi^2$-Verteilung und die $F$-Verteilung. Dabei ist es, außer bei der Normalverteilung, weniger wichtig sich die Formeln einzuprägen sondern es soll eher darum gehen die Form der Verteilung, den Wertebereich und die Parameter der Verteilung zu kennen. Also zum Beispiel wird die Normalverteilung durch zwei Parameter $\mu$ und $\sigma^2$ spezifiziert während die $\chi^2$-Verteilung nur über einen einzelnen Parameter den Freiheitsgrad $df$ bestimmt wird. Streng genommen wird auch nicht über vier Verteilungen gesprochen, sondern es handelt sich um jeweils Verteilungsfamilien, da es beispielsweise nicht die eine Normalverteilung gibt, sondern die Form wie eben beschrieben von den beiden Parametern abhängt. Dies gilt in gleich3em Maßen ebenfalls für die anderen behandelten Verteilungen.

## Normalverteilung

Beginnen wir mit der Normalverteilung\index{Normalverteilung}.

$$
f(x|\mu,\sigma^2) = \frac{1}{\sqrt{2 \pi \sigma^2}}e^{\left(-\frac{(x-\mu)^2}{2\sigma^2}\right)}
$$

Die Normalverteilung ist eine symmetrische Verteilung und hat die uns schon oft begegnete Glockenform (siehe @fig-stats-dist-ndist).

```{r}
#| fig.cap: Dichtefunktion der Normalverteilung mit den Parametern $\mu = 0$ und $\sigma = 1$.
#| label: fig-stats-dist-ndist

dnorm_plot <- function(mu = 0, sigma = 1, length.out = 100) {
  p1 <- tibble(
    x = seq(mu - sigma*3, mu + sigma*3, length.out = length.out),
    p = dnorm(x, mean = mu, sd = sqrt(sigma))) |> 
    ggplot(aes(x,p)) +
      geom_ribbon(aes(ymin = 0, ymax = p), fill = 'red', alpha=.3) +
      geom_line(size=2, col='red') + 
      labs(x = 'Werte', y = 'Dichte') 
  p1
}
dnorm_plot()
```

Der Wertebereich der Normalverteilung ist $X \in [-\infty, \infty]$. Das Maximum liegt genau beim Erwartungswert $\mu$ der dementsprechend die Verteilung in die linken 50% und die rechten 50% unterteilt. Das Abfallen der Flanken wird über die Varianz $\sigma^2$ geregelt. Wird $\sigma^2$ größer, fallen die Flanken flacher ab, wird $\sigma^2$ kleiner, fallen die Flanken schneller ab (siehe @fig-stats-dist-ndist2).

```{r}
#| layout-ncol: 2
#| label: fig-stats-dist-ndist2
#| fig-cap: Veränderung der Dichtefunktion bei unterschiedlichen Varianzen $\sigma^2$
#| fig-subcap:
#|  - "$\\sigma^2 = 1$"
#|  - "$\\sigma^2 = 2$"

dnorm_plot(0, 1)
dnorm_plot(0, 2)
```

Die Standardabweichung kann dazu verwendet werden, die Dichtfunktion in verschiedene Abschnitte zu unterteilen. Es gelten die folgenden Zusammenhänge (siehe @tbl-stats-dist-sigma-int):

| $x \in$ |  P  |
| ----  | ---- |
|$[-\sigma,\sigma]$| 0.682 |
|$[-2\sigma,2\sigma]$| 0.955 |
|$[-3\sigma,3\sigma]$| 0.997 |

: Wahrscheinlichkeiten für verschiedene Intervalle um $\mu$ in Abhängigkeit von $\sigma$ {#tbl-stats-dist-sigma-int}

Übertragen auf den Dichtegraphen folgt (siehe @fig-stats-dist-sigma-int):

```{r}
#| fig.cap: Dichtefunktion von $\mathcal{N}(\mu,\sigma^2)$
#| label: fig-stats-dist-sigma-int

x <- seq(-4, 4, 0.01)
sigma <- 1.3
mu <- 0
p <- dnorm(x, mean = mu, sd = sigma)
df <- data.frame(x, p) 
lab_dat <- tibble(x = c(-3,-2,-1,1,2,3)*sigma, p = 0.05, 
                  labels = c(bquote(-3~sigma),bquote(-2~sigma), bquote(-sigma),
                             'sigma',bquote(2~sigma),bquote(3~sigma)))
ggplot(df, aes(x,p, ymin = 0, ymax = p)) +
#  geom_ribbon(aes(ymin = 0, ymax = p), fill = 'red', alpha=.3) +
  geom_ribbon(data = tibble(x = seq(-1*sigma,1*sigma,0.01), p = dnorm(x, mu, sigma)), fill = 'green', alpha = .3) +
  geom_ribbon(data = tibble(x = seq(-2*sigma,-1*sigma,0.01), p = dnorm(x, mu, sigma)), fill = 'magenta', alpha = .3) +
  geom_ribbon(data = tibble(x = seq(1*sigma,2*sigma,0.01), p = dnorm(x, mu, sigma)), fill = 'magenta', alpha = .3) +
  geom_ribbon(data = tibble(x = seq(2*sigma,3*sigma,0.01), p = dnorm(x, mu, sigma)), fill = 'blue', alpha = .3) +
  geom_ribbon(data = tibble(x = seq(-3*sigma,-2*sigma,0.01), p = dnorm(x, mu, sigma)), fill = 'blue', alpha = .3) +
  geom_line() + 
  geom_label(data = lab_dat, aes(x = x, label = labels), parse = T) +
  scale_x_continuous(breaks=0, labels = expression(mu)) +
  labs(x = 'Werte', y = 'Dichte') 
```

Wie in @tbl-stats-dist-sigma-int zu sehen ist, hat der Bereich $[-2\sigma, 2\sigma]$ eine Wahrscheinlichkeit von etwas über $0.95$. Daher, wenn ich einen Bereich um den Erwartungswert $\mu$ auszeichnen möchte, der genau eine Wahrscheinlichkeit von $0.95$ hat, dann muss $\sigma$ mit einem kleineren Wert als $2$ multipliziert werden, nämlich $1.96$. Das wird hier noch mal speziell erwähnt, da die Zahl $1.96$ später immer wieder auftaucht. Formal:

$$P(x\in[\mu-1.96\sigma, \mu+1.96\sigma]) = 0.95$$

Anders herum, wenn es darum geht in Konfidenzintervall abzuschätzen, dann funktioniert auch die Faustregel, Teststatistik $\pm 2\times$ Standardfehler. 

### Die Standardnormalverteilung

Eine Sonderrolle in der Familie der Normalverteilungen spielt die Standardnormalverteilung\index{Standardnormalverteilung} mit $\mu = 0$ und $\sigma^2 = 1$. Tatsächlich taucht diese so oft aus, dass die Mathematiker ihr ein eigenes Symbol spendiert haben $\phi(x)$

$$
\phi(x) = \mathcal{N}(\mu = 0, \sigma^2 = 1)
$$

Im Fall der Standardnormalverteilung nehmen @tbl-stats-dist-sigma-int und @fig-stats-dist-sigma-int besonders einfache Formen an da die Intervalle jeweils $[-1,1]$, $[-2,2]$ und $[-3,3]$ sind (siehe @fig-stats-dist-phi-int).

```{r}
#| fig.cap: "Dichtefunktion der Standardnormalverteilung $\\phi(x)$ mit $\\mu=0$ und $\\sigma^2=1$"
#| label: fig-stats-dist-phi-int

x <- seq(-3, 3, 0.01)
sigma <- 1
mu <- 0
p <- dnorm(x, mean = mu, sd = sigma)
df <- data.frame(x, p) 
lab_dat <- tibble(x = c(-3,-2,-1,1,2,3)*sigma, p = 0.05, 
                  labels = c(bquote(-3~sigma),bquote(-2~sigma), bquote(-sigma),
                             'sigma',bquote(2~sigma),bquote(3~sigma)))
ggplot(df, aes(x,p, ymin = 0, ymax = p)) +
#  geom_ribbon(aes(ymin = 0, ymax = p), fill = 'red', alpha=.3) +
  geom_ribbon(data = tibble(x = seq(-1*sigma,1*sigma,0.01), p = dnorm(x, mu, sigma)), fill = 'green', alpha = .3) +
  geom_ribbon(data = tibble(x = seq(-2*sigma,-1*sigma,0.01), p = dnorm(x, mu, sigma)), fill = 'magenta', alpha = .3) +
  geom_ribbon(data = tibble(x = seq(1*sigma,2*sigma,0.01), p = dnorm(x, mu, sigma)), fill = 'magenta', alpha = .3) +
  geom_ribbon(data = tibble(x = seq(2*sigma,3*sigma,0.01), p = dnorm(x, mu, sigma)), fill = 'blue', alpha = .3) +
  geom_ribbon(data = tibble(x = seq(-3*sigma,-2*sigma,0.01), p = dnorm(x, mu, sigma)), fill = 'blue', alpha = .3) +
  geom_line(size=2) + 
  geom_label(data = lab_dat, aes(x = x, label = labels), parse = T) +
  scale_x_continuous(breaks = -3:3) +
  labs(x = 'Werte', y = 'Dichte') 
```

### z-Transformation

Es besteht mittels einer einfachen Möglichkeit jede beliebiege Normalverteilung $\mathcal{N}(\mu,\sigma^2)$ auf die Standardnormalverteilung $\mathcal{N}(0,1)$ abzubilden. Die Transformation wird als z-Transformation\index{z-Transformation} bezeichnet und hat die folgende Form:

$$
z = \frac{X - \mu_X}{\sigma_X}
$$ {#eq-z-transformation}

D.h. der Mittelwert der Verteilung von $X$ wird von X abgezogen und die Differenz wird durch die Standardabweichung der Population $\sigma_X$ geteilt. Die Umkehrfunktion ist dementsprechend:

$$
X = \mu_X + z \sigma_X
$$ {#eq-z-invtransformation}


### Zentraler Grenzwertsatz 

Die Normalverteilung spielt in der Wahrscheinlichkeitstheorie und der Statistik aus verschiedenen Gründen eine Spezialrolle. Ein Grund dafür ist der sogenannte Zentrale Grenzwertsatz, den wir hier nicht beweisen sondern nur kurz diskutieren.

::: {#prp-central-limit}
## Zentraler Grenzwertsatz

Seien $X_1, X_2, \ldots, X_n$ n unabhängige, gleichverteilte Zufallsvariablen mit $E[X_i]=\mu$ und $Var[X_i]=\sigma^2$ endlich. 
$$
 \lim_{n\to\infty}\frac{\bar{x} - \mu}{\frac{\sigma}{\sqrt{n}}}\ \rightarrow\ \mathcal{N}(\mu=0,\sigma^2=1)
$$
:::

In Worten besagt der Zentrale Grenzwertsatz, dass egal welche Ursprungsform die Verteilung einer Zufallsvariablen $X$ hat, wenn die Stichprobengröße gegen unendlich geht, die konvergiert die Differenz des Stichprobenmittelwerts und des Mittelwert der Verteilung geteilt durch den Stichprobenstandardfehler gegen die Standardnormalverteilung. Grenzwertsätz sind manchmal etwas schwierig zu interpretieren, da hier noch keine Aussage gemacht wird, wie groß die Stichprobe sein muss, damit diese Abschätzung valide ist. In der Praxis wird oft ab einer *gefühlt* großen Stichproben diese Abschätzung als zulässig angesehen. 

# Verteilungszoo

## t-Verteilung

```{r}
#| fig.cap: "Beispiel für verschiedene Dichtefunktionen der t-Verteilung"

n_fig_pts <- 130
t_dist <- tibble(
  x = seq(-5,5,length.out=n_fig_pts),
  t1 = dt(x,1),
  t3 = dt(x,3),
  t10 = dt(x,10)
) %>% tidyr::pivot_longer(-x, names_to='dist', values_to='v')
ggplot(t_dist, aes(x,v,fill=dist, ymin=0, ymax=v)) +
  geom_ribbon(alpha=0.3) +
  geom_line() + 
  scale_fill_discrete("Verteilungen",
                      breaks = c('t1', 't3', 't10'),
                      labels = c(expression(df==1),
                                 expression(df==3),
                                 expression(df==10))) +
  labs(x = 'Werte', y = 'Dichte') 
```


## $\chi^2$-Verteilung

```{r}
#| fig.cap: "Beispiele für verschiedene Dichtefunktion der $\\chi^2$-Verteilung."

chi_dist <- tibble(
  x = seq(0, 10, length.out=n_fig_pts),
  d1 = dchisq(x,1),
  d2 = dchisq(x,3),
  d3 = dchisq(x,5)
) %>% tidyr::pivot_longer(-x, names_to='dist', values_to='v')
ggplot(chi_dist, aes(x,v,fill=dist, ymin=0, ymax=v)) +
  geom_ribbon(alpha=0.3) +
  geom_line() + 
  scale_fill_discrete("Verteilungen",
                      breaks = c('d1', 'd2', 'd3'),
                      labels = c(expression(df==1),
                                 expression(df==3),
                                 expression(df==5))) +
  labs(x = 'Werte', y = 'Dichte') 
```

## F-Verteilung

```{r}
#| fig.cap: "Beispiele für verschiedene Dichtefunktion der F-Verteilung."

chi_dist <- tibble(
  x = seq(0, 10, length.out=n_fig_pts),
  d1 = df(x,1,1),
  d2 = df(x,3,5),
  d3 = df(x,10,10)
) %>% tidyr::pivot_longer(-x, names_to='dist', values_to='v')
ggplot(chi_dist, aes(x,v,fill=dist, ymin=0, ymax=v)) +
  geom_ribbon(alpha=0.3) +
  geom_line() + 
  scale_fill_discrete("Verteilungen",
                      breaks = c('d1', 'd2', 'd3'),
                      labels = c(expression(paste(df[1],"=1,",df[2],"=1")),
                                 expression(paste(df[1],"=3,",df[2],"=5")),
                                 expression(paste(df[1],"=10,",df[2],"=10")))) +
  labs(x = 'Werte', y = 'Dichte') 
```



